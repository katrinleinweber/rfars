[{"path":"/articles/Rural_roads.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Rural_roads","text":"","code":"# get_fars(years = 2016:2020)  myFARS <- use_fars()  myFARS$flat$per_typ <-    ifelse(grepl(\"motorcycle\",                 myFARS$flat$body_typ,                 ignore.case = TRUE),          \"Motorcyclist\",          myFARS$flat$per_typ)"},{"path":"/articles/Rural_roads.html","id":"compare_counts","dir":"Articles","previous_headings":"","what":"compare_counts","title":"Rural_roads","text":"","code":"compare_counts <- function(myFARS, what, involved=NULL,                             when=2016:2020, interval=\"year\"){      bind_rows(     counts(myFARS, what=what, when=when, interval=interval, involved=involved,            where=\"rural\", ) %>%       mutate(where = \"Rural\"),     counts(myFARS, what=what, when=when, interval=interval, involved=involved,            where=\"urban\") %>%       mutate(where = \"Urban\")     ) %>%   return()    }"},{"path":[]},{"path":"/articles/Rural_roads.html","id":"counts","dir":"Articles","previous_headings":"Crashes","what":"Counts","title":"Rural_roads","text":"","code":"compare_counts(myFARS, \"crashes\") %>%  ggplot(aes(x=date, y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~where) +   labs(x=NULL, y=NULL, title = \"Crashes\", fill=NULL)"},{"path":"/articles/Rural_roads.html","id":"by-type","dir":"Articles","previous_headings":"Crashes","what":"by Type","title":"Rural_roads","text":"","code":"bind_rows(   counts(myFARS,        what = \"crashes\",        when = 2016:2020,        where = \"rural\",        interval = c(\"year\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>% #crash type is on the vehicle-level, this prevents over-counting     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Rural\"),   counts(myFARS,        what = \"crashes\",        when = 2016:2020,        where = \"urban\",        interval = c(\"year\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>%     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Urban\")     ) %>%   filter(!is.na(acc_type)) %>%   group_by(where, acc_type) %>% summarize(n=sum(n, na.rm=TRUE)) %>%   tidyr::pivot_wider(names_from = \"where\", values_from = \"n\") %>%   mutate(Total = Urban + Rural,          rural_pct = Rural/Total) %>%   arrange(desc(Total)) %>%   slice(1:20) %>%   arrange(desc(rural_pct)) %>%   mutate(acc_type = reorder(acc_type, rural_pct)) %>%      ggplot(aes(y=acc_type, x=rural_pct, fill=Rural, label=scales::percent(rural_pct, accuracy = 1))) +      geom_col() +      geom_label(hjust=1, fill=\"white\") +   scale_fill_continuous(labels=scales::comma) +     labs(x=NULL, y=NULL,           title = \"20 Most Common Crash Types by Prevalence in Rural Areas\") +     theme(plot.title.position = \"plot\") #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> `summarise()` has grouped output by 'where'. You can override using the #> `.groups` argument."},{"path":"/articles/Rural_roads.html","id":"road-curvature","dir":"Articles","previous_headings":"Crashes","what":"Road Curvature","title":"Rural_roads","text":"","code":"myFARS$flat %$% table(valign, year) #>                                    year #> valign                               2016  2017  2018  2019  2020 #>   Curve - Left                          0     0  7576  6838  7609 #>   Curve - Right                         0     0  5890  5915  6381 #>   Curve - Unknown Direction           980   976  1205  1218  1239 #>   Curve Left                         8086  7606     0     0     0 #>   Curve Right                        6474  6369     0     0     0 #>   Non-Trafficway or Driveway Access   422   542   457   509   608 #>   Not Reported                       1847  1870  1618  1281  1208 #>   Reported as Unknown                   0     0   141   105   150 #>   Straight                          60521 60404 59149 58782 60152 #>   Unknown                             124   107     0     0     0 myFARS$flat %$% table(vprofile, year) #>                                    year #> vprofile                             2016  2017  2018  2019  2020 #>   Downhill                           4684  4339  4009  3516  3847 #>   Grade, Unknown Slope               7566  7406  7655  7322  7206 #>   Hillcrest                          1903  1776  1801  1747  1797 #>   Level                             54558 54139 52532 52285 53803 #>   Non-Trafficway or Driveway Access   422   542   457   509   608 #>   Not Reported                       5449  6140  6163  6098  6772 #>   Reported as Unknown                   0     0   170   152   177 #>   Sag (Bottom)                        263   254   226   231   185 #>   Unknown                             208   172     0     0     0 #>   Uphill                             3401  3106  3023  2788  2952 myFARS$flat %$% table(vprofile, valign) #>                                    valign #> vprofile                            Curve - Left Curve - Right #>   Downhill                                  2564          2211 #>   Grade, Unknown Slope                      3897          3128 #>   Hillcrest                                  590           510 #>   Level                                    11886          9835 #>   Non-Trafficway or Driveway Access            0             0 #>   Not Reported                              1227          1027 #>   Reported as Unknown                         11            26 #>   Sag (Bottom)                               115            68 #>   Unknown                                      0             0 #>   Uphill                                    1733          1381 #>                                    valign #> vprofile                            Curve - Unknown Direction Curve Left #>   Downhill                                                218       1996 #>   Grade, Unknown Slope                                   2016       2721 #>   Hillcrest                                               290        388 #>   Level                                                  2623       8375 #>   Non-Trafficway or Driveway Access                         0          0 #>   Not Reported                                            266        831 #>   Reported as Unknown                                       4          0 #>   Sag (Bottom)                                             35         87 #>   Unknown                                                   5         13 #>   Uphill                                                  161       1281 #>                                    valign #> vprofile                            Curve Right #>   Downhill                                 1740 #>   Grade, Unknown Slope                     2262 #>   Hillcrest                                 392 #>   Level                                    6570 #>   Non-Trafficway or Driveway Access           0 #>   Not Reported                              647 #>   Reported as Unknown                         0 #>   Sag (Bottom)                               63 #>   Unknown                                    23 #>   Uphill                                   1146 #>                                    valign #> vprofile                            Non-Trafficway or Driveway Access #>   Downhill                                                          0 #>   Grade, Unknown Slope                                              0 #>   Hillcrest                                                         0 #>   Level                                                             0 #>   Non-Trafficway or Driveway Access                              2538 #>   Not Reported                                                      0 #>   Reported as Unknown                                               0 #>   Sag (Bottom)                                                      0 #>   Unknown                                                           0 #>   Uphill                                                            0 #>                                    valign #> vprofile                            Not Reported Reported as Unknown Straight #>   Downhill                                   136                   0    11528 #>   Grade, Unknown Slope                        32                   2    23096 #>   Hillcrest                                    2                   0     6851 #>   Level                                      562                   3   227459 #>   Non-Trafficway or Driveway Access            0                   0        0 #>   Not Reported                              6948                   4    19672 #>   Reported as Unknown                          2                 387       69 #>   Sag (Bottom)                                 2                   0      789 #>   Unknown                                      5                   0      111 #>   Uphill                                     135                   0     9433 #>                                    valign #> vprofile                            Unknown #>   Downhill                                2 #>   Grade, Unknown Slope                    1 #>   Hillcrest                               1 #>   Level                                   4 #>   Non-Trafficway or Driveway Access       0 #>   Not Reported                            0 #>   Reported as Unknown                     0 #>   Sag (Bottom)                            0 #>   Unknown                               223 #>   Uphill                                  0  myFARS$flat %>%   mutate(valign = ifelse(grepl(\"Curve\", valign), \"Curve\", valign)) %>%   filter(veh_no == 1, #to avoid over-counting          rur_urb %in% c(\"Rural\", \"Urban\"),          valign %in% c(\"Straight\", \"Curve\")) %>%   select(id, valign, rur_urb) %>% unique() %>%   group_by(valign, rur_urb) %>%   summarize(n = n()) %>%      ggplot(aes(fill=rur_urb, y=n, x=valign, label=scales::comma(n, accuracy = 1))) +      geom_col(position = \"dodge\") +      geom_label(vjust=1, position = position_dodge(.9)) #> `summarise()` has grouped output by 'valign'. You can override using the #> `.groups` argument. myFARS$flat %>%   mutate(vprofile = ifelse(vprofile %in% c(\"Uphill\", \"Downhill\"), \"Up/downhill\", vprofile)) %>%   filter(veh_no == 1, #to avoid over-counting          rur_urb %in% c(\"Rural\", \"Urban\"),          !(vprofile %in% c(\"Unknown\", \"Reported as Unknown\", \"Not Reported\"))          ) %>%   select(id, vprofile, rur_urb) %>% unique() %>%   group_by(vprofile, rur_urb) %>%   summarize(n = n()) %>%      ggplot(aes(fill=rur_urb, x=n, y=vprofile, label=scales::comma(n, accuracy = 1))) +      geom_col(position = \"dodge\") +      geom_label(vjust=1, position = position_dodge(.9)) #> `summarise()` has grouped output by 'vprofile'. You can override using the #> `.groups` argument. myFARS$flat %>%   mutate(     vprofile = ifelse(vprofile %in% c(\"Uphill\", \"Downhill\"), \"Up/downhill\", vprofile),     valign = ifelse(grepl(\"Curve\", valign), \"Curve\", valign)     ) %>%   filter(veh_no == 1, #to avoid over-counting          rur_urb %in% c(\"Rural\", \"Urban\"),          valign %in% c(\"Straight\", \"Curve\"),          !(vprofile %in% c(\"Unknown\", \"Reported as Unknown\", \"Not Reported\"))          ) %>%   select(id, vprofile, valign, rur_urb) %>% unique() %>%   group_by(vprofile, valign, rur_urb) %>%   summarize(n = n()) %>%    ggplot(aes(x=valign, y=vprofile, fill=n, label=scales::comma(n))) +   geom_tile() +   facet_wrap(.~rur_urb) +   viridis::scale_fill_viridis() +   geom_label() #> `summarise()` has grouped output by 'vprofile', 'valign'. You can override #> using the `.groups` argument."},{"path":"/articles/Rural_roads.html","id":"fatalities","dir":"Articles","previous_headings":"","what":"Fatalities","title":"Rural_roads","text":"","code":"compare_counts(myFARS, \"fatalities\") %>%    ggplot(aes(x=date, y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~where) +   labs(x=NULL, y=NULL, title = \"Fatalities\", fill=NULL)"},{"path":"/articles/Rural_roads.html","id":"by-person-type","dir":"Articles","previous_headings":"Fatalities","what":"by Person Type","title":"Rural_roads","text":"","code":"myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, per_typ) %>%   summarise(n=n()) %>%   filter(n>900) %>%   mutate(per_typ = stringr::str_wrap(per_typ, 15)) %>%      ggplot(aes(x=per_typ, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(vjust=1, position = \"dodge\") +     geom_label(position = position_dodge(.9)) #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. #> Warning: Ignoring unknown parameters: vjust"},{"path":"/articles/Rural_roads.html","id":"by-sex","dir":"Articles","previous_headings":"Fatalities","what":"by Sex","title":"Rural_roads","text":"","code":"myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, sex) %>%   summarise(n=n()) %>%   filter(n>900) %>%   mutate(sex = stringr::str_wrap(sex, 15)) %>%      ggplot(aes(x=sex, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(vjust=1, position = \"dodge\") +     geom_label(position = position_dodge(.9)) #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. #> Warning: Ignoring unknown parameters: vjust"},{"path":"/articles/Rural_roads.html","id":"by-race","dir":"Articles","previous_headings":"Fatalities","what":"by Race","title":"Rural_roads","text":"","code":"myFARS$multi_per %>%    filter(name == \"race\") %>%   select(state, st_case, veh_no, per_no, year, race=value) %>%   inner_join(myFARS$flat) %>%      filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, race) %>%   summarise(n=n()) %>%   filter(n>900) %>%   mutate(race = stringr::str_wrap(race, 15)) %>%      ggplot(aes(x=race, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(vjust=1, position = \"dodge\") +     geom_label(position = position_dodge(.9)) #> Joining, by = c(\"state\", \"st_case\", \"veh_no\", \"per_no\", \"year\") #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. #> Warning: Ignoring unknown parameters: vjust"},{"path":"/articles/Rural_roads.html","id":"by-ethnicity","dir":"Articles","previous_headings":"Fatalities","what":"by Ethnicity","title":"Rural_roads","text":"","code":"myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, hispanic) %>%   summarise(n=n()) %>%   filter(n>900) %>%   mutate(hispanic = stringr::str_wrap(hispanic, 15)) %>%      ggplot(aes(x=hispanic, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(vjust=1, position = \"dodge\") +     geom_label(position = position_dodge(.9)) #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. #> Warning: Ignoring unknown parameters: vjust"},{"path":"/articles/Rural_roads.html","id":"by-vehicle-type","dir":"Articles","previous_headings":"Fatalities","what":"by Vehicle Type","title":"Rural_roads","text":"(Excludes pedbikes)","code":"myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   filter(!(per_typ %in% c(\"Bicyclist\", \"Pedestrian\"))) %>%   group_by(rur_urb, body_typ) %>%   summarise(n=n()) %>%   filter(n>3000) %>%   mutate(body_typ = stringr::str_wrap(body_typ, 80)) %>%    ggplot(aes(y=body_typ, x=n, fill=rur_urb, label=scales::comma(n, accuracy = 1))) +      geom_col(position = \"dodge\") +      geom_label(hjust=1, position = position_dodge(.9)) #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument."},{"path":"/articles/Rural_roads.html","id":"motorcyclists-and-helmet-use","dir":"Articles","previous_headings":"Fatalities","what":"Motorcyclists and Helmet Use","title":"Rural_roads","text":"","code":"#myFARS$flat %$% table(helm_use, year) #myFARS$flat %$% table(rest_use, year)  myFARS$flat %>%   filter(grepl(\"(K)\", inj_sev),           per_typ == \"Motorcyclist\",          rur_urb %in% c(\"Rural\", \"Urban\")) %>%   mutate(motorcyclist_helmet = case_when(     rest_use %in% c(\"No Helmet\") ~ \"No Helmet\",     rest_use %in% c(\"DOT-Compliant Motorcycle Helmet\",                     \"Helmet, Other than DOT-Compliant Motorcycle Helmet\",                     \"Helmet, Unknown if DOT Compliant\") ~ \"Helmet Worn\",     helm_use %in% c(\"No Helmet\") ~ \"No Helmet\",     helm_use %in% c(\"DOT-Compliant Motorcycle Helmet\",                     \"Helmet, Other than DOT-Compliant Motorcycle Helmet\",                     \"Helmet, Unknown if DOT Compliant\") ~ \"Helmet Worn\",     TRUE ~ \"Other\")     ) %>%   group_by(rur_urb, motorcyclist_helmet) %>%   summarize(n = n()) %>%      ggplot(aes(fill=motorcyclist_helmet, y=n, x=rur_urb, label=scales::comma(n, accuracy = 1))) +      geom_col(position = \"dodge\") +      geom_label(vjust=1, position = position_dodge(.9)) #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument."},{"path":"/articles/Rural_roads.html","id":"by-victim-age","dir":"Articles","previous_headings":"Fatalities","what":"by Victim Age","title":"Rural_roads","text":"","code":"myFARS$flat %>%   filter(grepl(\"(K)\", inj_sev),           rur_urb %in% c(\"Rural\", \"Urban\")) %>%   mutate(age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric()) %>%   group_by(rur_urb, age_n) %>% summarize(n=n()) %>%      ggplot(aes(x=age_n, y=n, color = rur_urb)) +     geom_line() #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. #> Warning: Removed 2 row(s) containing missing values (geom_path)."},{"path":"/articles/Rural_roads.html","id":"by-age-and-time","dir":"Articles","previous_headings":"Fatalities","what":"by Age and Time","title":"Rural_roads","text":"","code":"myFARS$flat %>%   mutate(age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric()) %>%   filter(grepl(\"(K)\", inj_sev),          rur_urb %in% c(\"Rural\", \"Urban\"),          hour < 25,          age_n <= 90) %>%   group_by(rur_urb, age_n, hour) %>% summarize(n=n()) %>%      ggplot(aes(x=hour, y=age_n, fill=n)) +     geom_tile() +     facet_wrap(.~rur_urb) +     viridis::scale_fill_viridis() #> `summarise()` has grouped output by 'rur_urb', 'age_n'. You can override using #> the `.groups` argument."},{"path":"/articles/Rural_roads.html","id":"various-factors","dir":"Articles","previous_headings":"Fatalities","what":"Various Factors","title":"Rural_roads","text":"","code":"crashfactors <- c(\"distracted driver\", \"drowsy driver\", \"police pursuit\",                    \"motorcycle\", \"pedalcyclist\", \"bicyclist\", \"pedestrian\",                    \"pedbike\", \"young driver\", \"older driver\", \"speeding\",                    \"alcohol\", \"drugs\", \"hit and run\", \"roadway departure\", \"rollover\"#,                    #\"large trucks\"                   )  for(crashfactor in crashfactors){      p <-      compare_counts(myFARS, \"fatalities\", crashfactor) %>%     ggplot(aes(x=year, y=n, label=scales::comma(n))) +       geom_col(position=\"dodge\") +       facet_wrap(.~where) +       geom_label(position = position_dodge(.9), vjust=1) +       labs(title = paste0(\"Fatalities: \", crashfactor))    print(p)    } #> Note: Young drivers are defined as those between the ages of 15 and 20. #> Warning in mask$eval_all_mutate(quo): NAs introduced by coercion #> Note: Young drivers are defined as those between the ages of 15 and 20. #> Warning in mask$eval_all_mutate(quo): NAs introduced by coercion #> Note: Older drivers are defined as those aged 65+. #> Warning in mask$eval_all_mutate(quo): NAs introduced by coercion #> Note: Older drivers are defined as those aged 65+. #> Warning in mask$eval_all_mutate(quo): NAs introduced by coercion"},{"path":[]},{"path":"/articles/Rural_roads.html","id":"injury-severity","dir":"Articles","previous_headings":"People","what":"Injury Severity","title":"Rural_roads","text":"","code":"myFARS$flat %>%   mutate(kabco = case_when(inj_sev == \"Fatal Injury (K)\" ~ \"K\",                            inj_sev %in% c(\"Suspected Serious Injury (A)\",                                            \"Suspected Serious Injury(A)\") ~ \"A\",                            inj_sev %in% c(\"Suspected Minor Injury (B)\",                                            \"Suspected Minor Injury(B)\") ~ \"B\",                            inj_sev == \"Possible Injury (C)\" ~ \"C\",                            inj_sev == \"No Apparent Injury (O)\" ~ \"O\",                            TRUE ~ as.character(NA)                            )) %>%   filter(!is.na(kabco), rur_urb %in% c(\"Rural\", \"Urban\")) %>%   mutate(kabco = factor(kabco, levels = c(\"K\", \"A\", \"B\", \"C\", \"O\"))) %>%   group_by(year, kabco, rur_urb) %>% summarize(n = n()) %>%      ggplot(aes(x=year, y=n, fill=rur_urb)) +     geom_col(position = \"dodge\") +     facet_wrap(.~kabco, nrow=1) #> `summarise()` has grouped output by 'year', 'kabco'. You can override using the #> `.groups` argument."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steve Jackson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jackson S (2022). rfars: Download Analyze FARS Data. R package version 0.1.0, https://github.com/s87jackson/rfars.","code":"@Manual{,   title = {rfars: Download and Analyze FARS Data},   author = {Steve Jackson},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/s87jackson/rfars}, }"},{"path":"/index.html","id":"rfars","dir":"","previous_headings":"","what":"Download and Analyze FARS Data","title":"Download and Analyze FARS Data","text":"goal rfars simplify process analyzing FARS data. Fatality Injury Reporting System Tool allows users generate queries, can produce simple tables graphs. suffices simple analysis, often leaves researchers wanting . Digging deeper, however, involves time-consuming process downloading annual ZIP files attempting stitch together - first combing immense data dictionary determine required variables table names. rfarsallows users download five years FARS data just two lines code. result full, rich dataset ready mapping, modeling, downstream analysis. Helper functions also provided produce common counts comparisons. companion package rfarsplusprovides exposure data facilitates calculation various rates.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Analyze FARS Data","text":"can install latest version rfarsfrom GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"s87jackson/rfars\")"},{"path":"/index.html","id":"getting-data","dir":"","previous_headings":"","what":"Getting Data","title":"Download and Analyze FARS Data","text":"import 5 years data Virginia. Note get_farsrequires permission download ZIP files NHTSA save prepared files hard drive. run defaults saving everything current working directory. use_farsfunction looks directory certain files compiles list data frames: flat, multi_acc, multi_veh, multi_per. can review list variables help guide analysis :","code":"library(rfars) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # get_fars(years = 2016:2020, states=\"Virginia\")  myFARS <- use_fars()   #head(myFARS) View(fars_varnames)"},{"path":"/index.html","id":"counts","dir":"","previous_headings":"","what":"Counts","title":"Download and Analyze FARS Data","text":"first step many transportation analyses involves counting number relevant crashes, fatalities, people involved. countslets users specify time period aggregation interval, focus specific road users factors. can combined ggplotto quickly visualize counts.    can combine two countsto make comparison. compare number speeding-related fatalities rural urban places:","code":"library(ggplot2)  counts(myFARS,        what = \"crashes\",        when = 2016:2020,        interval = c(\"year\")        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Annual Crashes in Virginia\") counts(myFARS,        what = \"fatalities\",        when = 2016:2020,        interval = c(\"year\")        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Annual Fatalities in Virginia\") counts(myFARS,        what = \"fatalities\",        when = 2016:2020,        where = \"rural\",        interval = c(\"year\")        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Annual Rural Fatalities in Virginia\") bind_rows(   counts(myFARS,        what = \"fatalities\",        when = 2016:2020,        where = \"rural\",        interval = c(\"year\"),        involved = \"speeding\"        ) %>%     mutate(where = \"Rural\"),   counts(myFARS,        what = \"fatalities\",        when = 2016:2020,        where = \"urban\",        interval = c(\"year\"),        involved = \"speeding\"        ) %>%     mutate(where = \"Urban\")     ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     facet_wrap(.~where) +     labs(x=NULL, y=NULL, title = \"Speeding-Related Fatalities in Virginia\", fill=NULL)"},{"path":"/index.html","id":"mapping","dir":"","previous_headings":"","what":"Mapping","title":"Download and Analyze FARS Data","text":"can take advantage access full data maps. map locations pedbikes involved fatal crashes Virginia:  can also use counts(..., filterOnly=TRUE) access filtered data prior aggregating:","code":"library(leaflet) library(leaflet.extras)  myFARS$flat %>%    filter(per_typ %in% c(\"Bicyclist\", \"Pedestrian\")) %>%   #filter(per_typ %in% c(\"Bicyclist\")) %>%   leaflet() %>%     addTiles() %>%     addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 10) %>%     addCircleMarkers(       radius = 1,       color = \"red\",       stroke = FALSE,       fillOpacity = 0.7, group = \"Crash Locations\") %>%     addLayersControl(       overlayGroups = c(\"Crash Locations\", \"Heatmap\"),       options = layersControlOptions(collapsed = FALSE)) #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively counts(myFARS, what = \"fatalities\", when = 2016:2020, involved = \"alcohol\",         filterOnly = TRUE) %>%   leaflet() %>%   addTiles() %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7) #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Warning in validateCoords(lng, lat, funcName): Data contains 2 rows with either #> missing or invalid lat/lon values and will be ignored"},{"path":"/index.html","id":"modeling","dir":"","previous_headings":"","what":"Modeling","title":"Download and Analyze FARS Data","text":"access full dataset also allows us develop statistical models. fit simple model injury severity:","code":"table(myFARS$flat$inj_sev) #>  #>         Died Prior to Crash*             Fatal Injury (K)  #>                            1                         4950  #>       No Apparent Injury (O)          Possible Injury (C)  #>                         1969                          458  #>   Suspected Minor Injury (B)    Suspected Minor Injury(B)  #>                         1153                          183  #> Suspected Serious Injury (A)  Suspected Serious Injury(A)  #>                         1262                          227  #>         Unknown/Not Reported  #>                          119 table(myFARS$flat$rest_mis) #>  #>                           No     No Indication of Mis-Use  #>                         4667                         2654  #>     None Used/Not Applicable Not a Motor Vehicle Occupant  #>                         2154                          831  #>   Yes, Indication of Mis-Use  #>                           16  myFARS$flat %>%   mutate(kabco = case_when(inj_sev == \"Fatal Injury (K)\" ~ 4,                            inj_sev %in% c(\"Suspected Serious Injury (A)\",                                            \"Suspected Serious Injury(A)\") ~ 3,                            inj_sev %in% c(\"Suspected Minor Injury (B)\",                                            \"Suspected Minor Injury(B)\") ~ 2,                            inj_sev == \"Possible Injury (C)\" ~ 1,                            inj_sev == \"No Apparent Injury (O)\" ~ 0,                            TRUE ~ as.numeric(NA)                            ),          age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric()) %>%   lm(kabco ~ age_n + rest_mis, data = .) %>%   summary() #>  #> Call: #> lm(formula = kabco ~ age_n + rest_mis, data = .) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.7896 -0.6757  0.3125  1.1824  2.0983  #>  #> Coefficients: #>                                        Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                           2.4431478  0.0353397  69.133  < 2e-16 *** #> age_n                                 0.0056728  0.0006919   8.199 2.72e-16 *** #> rest_misNo Indication of Mis-Use     -0.5471232  0.0337612 -16.206  < 2e-16 *** #> rest_misNone Used/Not Applicable      0.8812804  0.0376549  23.404  < 2e-16 *** #> rest_misNot a Motor Vehicle Occupant  1.1872643  0.0521402  22.771  < 2e-16 *** #> rest_misYes, Indication of Mis-Use   -0.1824123  0.3427040  -0.532    0.595     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.365 on 9696 degrees of freedom #>   (620 observations deleted due to missingness) #> Multiple R-squared:  0.158,  Adjusted R-squared:  0.1575  #> F-statistic: 363.8 on 5 and 9696 DF,  p-value: < 2.2e-16"},{"path":"/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a variety of counts from FARS data — counts","title":"Generate a variety of counts from FARS data — counts","text":"Generate variety counts FARS data","code":""},{"path":"/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a variety of counts from FARS data — counts","text":"","code":"counts(   FARS,   what = \"crashes\",   when,   interval = \"year\",   where = NULL,   who = NULL,   involved = NULL,   filterOnly = FALSE )"},{"path":"/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a variety of counts from FARS data — counts","text":"FARS input FARS data flat multi components. count: crashes, fatalities, people involved. years count. interval interval count: months years. count: can specify rural/urban /state (e.g., = \"rural Virginia\", = \"rural\", = \"North Carolina\") type person count: driver, passenger, pedestrian, bicyclist, motorcyclist. involved Factors involved crash. Can : distracted driver, drowsy driver, police pursuit, motorcycle, pedalcyclist, bicyclist, pedestrian, pedbike, young driver, older driver, speeding, alcohol, drugs, hit run, roadway departure, rollover, large trucks. filterOnly Logical, whether filter reduce counts.","code":""},{"path":"/reference/counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a variety of counts from FARS data — counts","text":"...","code":""},{"path":"/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a variety of counts from FARS data — counts","text":"","code":"if (FALSE) { get_fars(years = 2016:2020, states=\"Virginia\") %>%   use_fars()   counts(     what = \"fatalities\",     when = 2016:2020,     who = c(\"bicyclists\", \"pedestrians\"),     where = \"urban\"     ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) + geom_col() + geom_label()   }"},{"path":"/reference/distracted_driver.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find various cases — distracted_driver","title":"(Internal) Find various cases — distracted_driver","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"/reference/distracted_driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find various cases — distracted_driver","text":"","code":"distracted_driver(FARS)"},{"path":"/reference/distracted_driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find various cases — distracted_driver","text":"FARS FARS data object searched.","code":""},{"path":"/reference/download_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Download FARS data files — download_fars","title":"Download FARS data files — download_fars","text":"Download annual files directly NHTSA unzip     newly created ~/FARS data/raw directory.","code":""},{"path":"/reference/download_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download FARS data files — download_fars","text":"","code":"download_fars(years, save_dir = getwd())"},{"path":"/reference/download_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download FARS data files — download_fars","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2016-2020 save_dir Directory store files","code":""},{"path":"/reference/download_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download FARS data files — download_fars","text":"Returns location raw data data (save_dir/FARS data/raw),     intended piped prep_fars","code":""},{"path":"/reference/download_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download FARS data files — download_fars","text":"Raw files downloaded NHTSA     stored save_dir/FARS data/raw/","code":""},{"path":[]},{"path":"/reference/download_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download FARS data files — download_fars","text":"","code":"if (FALSE) { download_fars(c(\"2019\", \"2020\")) download_fars(2016:2020) }"},{"path":"/reference/fars_data_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","title":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","text":"dataset describing major changes FARS data system time.","code":""},{"path":"/reference/fars_data_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","text":"","code":"fars_data_changes"},{"path":"/reference/fars_data_changes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","text":"data frame 46 rows 480 columns.","code":""},{"path":"/reference/fars_data_changes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","text":"https://crashstats.nhtsa.dot.gov/Api/Public/ViewPublication/813254","code":""},{"path":"/reference/fars_data_changes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Changes in FARS Data Elements by Data File and Year — fars_data_changes","text":"See Appendix F 2020 Analytical User’s Manual information.","code":""},{"path":"/reference/fars_data_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"FARS data structure — fars_data_structure","title":"FARS data structure — fars_data_structure","text":"dataset describing structure level raw FARS data file.","code":""},{"path":"/reference/fars_data_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FARS data structure — fars_data_structure","text":"","code":"fars_data_structure"},{"path":"/reference/fars_data_structure.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FARS data structure — fars_data_structure","text":"data frame 27 rows 4 columns. tablename cleaned name data file structure either one multiple, indicating number rows per entity level entity level (crash, vehicle, person) data file year_created first year data file use","code":""},{"path":"/reference/fars_data_structure.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FARS data structure — fars_data_structure","text":"Page 19 2020 Analytical User’s Manual","code":""},{"path":"/reference/fars_varnames.html","id":null,"dir":"Reference","previous_headings":"","what":"FARS Variable Names — fars_varnames","title":"FARS Variable Names — fars_varnames","text":"dataset translates machine-readable variable names friendly names","code":""},{"path":"/reference/fars_varnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FARS Variable Names — fars_varnames","text":"","code":"fars_varnames"},{"path":"/reference/fars_varnames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FARS Variable Names — fars_varnames","text":"data frame 468 rows 4 columns","code":""},{"path":"/reference/fars_varnames.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FARS Variable Names — fars_varnames","text":"https://crashstats.nhtsa.dot.gov/Api/Public/ViewPublication/813254","code":""},{"path":"/reference/fars_varnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FARS Variable Names — fars_varnames","text":"See 2020 Analytical User’s Manual information. table cleaned name data file original original variable name friendly human-readable (friendly) version variable name original_clean cleaned name variable","code":""},{"path":"/reference/geo_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Synonym table for various geographical scales — geo_relations","title":"Synonym table for various geographical scales — geo_relations","text":"dataset providing different ways refer states counties.","code":""},{"path":"/reference/geo_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synonym table for various geographical scales — geo_relations","text":"","code":"geo_relations"},{"path":"/reference/geo_relations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synonym table for various geographical scales — geo_relations","text":"data frame 3,142 rows 6 variables: fips_state 2-digit FIPS code indicating state fips_county 3-digit FIPS code indicating county within state fips_tract 6-digit FIPS code indicating tract within county state_name_abbr 2-character, capitalized state abbreviation state_name_full fully spelled case-sensitive state name county_name_abbr abbreviated county name (usually minus word 'County') county_name_full fully spelled case-sensitive county name","code":""},{"path":"/reference/geo_relations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Synonym table for various geographical scales — geo_relations","text":"https://www.census.gov/geographies/reference-files/2015/demo/popest/2015-fips.html","code":""},{"path":"/reference/get_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FARS data — get_fars","title":"Get FARS data — get_fars","text":"function wrapper download_fars prep_fars.     downloads raw files NHTSA produces analysis-ready data files.","code":""},{"path":"/reference/get_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FARS data — get_fars","text":"","code":"get_fars(years = 2020, states = NULL, save_dir = getwd())"},{"path":"/reference/get_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FARS data — get_fars","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2016-2020 states (Optional) States keep. Leave NULL keep states. Can specified full state name (e.g. \"Virginia\"), abbreviation (\"VA\"), FIPS code (51). save_dir Directory store files","code":""},{"path":"/reference/get_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get FARS data — get_fars","text":"Prepared data files stored save_dir/FARS data/prepared/","code":""},{"path":[]},{"path":"/reference/get_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FARS data — get_fars","text":"","code":"get_fars(c(\"2019\", \"2020\")) #> We will now download several files from https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/FARS/  #> Proceed? (Y/N)  #>  #> Download cancelled. #> We will now create several CSV files and save them in  #>  Proceed? (Y/N)  #>  #> Operation cancelled. if (FALSE) { get_fars(2016:2020, \"Virginia\") get_fars(2020, \"NC\") }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/prep_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare FARS data — prep_fars","title":"Prepare FARS data — prep_fars","text":"Combine raw files create analysis-ready FARS data files.","code":""},{"path":"/reference/prep_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare FARS data — prep_fars","text":"","code":"prep_fars(raw_dir = getwd(), states = NULL, years = NULL)"},{"path":"/reference/prep_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare FARS data — prep_fars","text":"raw_dir Directory raw files currently saved. states (Optional) States keep. Leave NULL keep states. Can specified full state name (e.g. \"Virginia\"), abbreviation (\"VA\"), FIPS code (51). years (Optional) Years keep. Leave NULL use years data exist raw_dir.","code":""},{"path":"/reference/prep_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare FARS data — prep_fars","text":"Produces four files year: yyyy_flat.csv, yyyy_multi_acc.csv,     yyyy_multi_veh.csv, yyyy_multi_per.csv.","code":""},{"path":"/reference/prep_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare FARS data — prep_fars","text":"Flat files wide-formatted presented person level.     crashes involve least one motor vehicle,     may contain one multiple people. three     entities crash data. flat files therefore repeat data elements     across multiple rows. Please conduct analysis entity mind.      data elements can include multiple values data level     (e.g., multiple weather conditions corresponding crash, multiple     crash factors related vehicle person). elements     collected yyyy_multi_[acc/veh/per].csv files long format.     files contain crash, vehicle, person identifiers, two     variables labelled name value. correspond     variable names raw data files corresponding values,     respectively.      flat files contain one row per person (may result multiple     rows associated vehicles crashes), multi files can     contain variable number rows crash entity.      Consult Analytical User’s Manual     information.","code":""},{"path":"/reference/prep_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare FARS data — prep_fars","text":"","code":"prep_fars(\"Virginia\") #> We will now create several CSV files and save them in Virginia #>  Proceed? (Y/N)  #>  #> Operation cancelled. if (FALSE) { prep_fars() prep_fars(\"NC\") }"},{"path":"/reference/prep_fars_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle yyyy data preparation — prep_fars_2017","title":"Handle yyyy data preparation — prep_fars_2017","text":"Handle yyyy data preparation","code":""},{"path":"/reference/prep_fars_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle yyyy data preparation — prep_fars_2017","text":"","code":"prep_fars_2017(y, wd, rawfiles, prepared_dir, geo_filtered)"},{"path":"/reference/prep_fars_2017.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle yyyy data preparation — prep_fars_2017","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars geo_filtered dataframe filtered geo-identifiers, passed prep_fars","code":""},{"path":"/reference/prep_fars_2017.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle yyyy data preparation — prep_fars_2017","text":"Produces four files year: yyyy_flat.csv, yyyy_multi_acc.csv,     yyyy_multi_veh.csv, yyyy_multi_per.csv","code":""},{"path":"/reference/prep_fars_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle yyyy data preparation — prep_fars_2018","title":"Handle yyyy data preparation — prep_fars_2018","text":"Handle yyyy data preparation","code":""},{"path":"/reference/prep_fars_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle yyyy data preparation — prep_fars_2018","text":"","code":"prep_fars_2018(y, wd, rawfiles, prepared_dir, geo_filtered)"},{"path":"/reference/prep_fars_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle yyyy data preparation — prep_fars_2018","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars geo_filtered dataframe filtered geo-identifiers, passed prep_fars","code":""},{"path":"/reference/prep_fars_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle yyyy data preparation — prep_fars_2018","text":"Produces four files year: yyyy_flat.csv, yyyy_multi_acc.csv,     yyyy_multi_veh.csv, yyyy_multi_per.csv","code":""},{"path":"/reference/prep_fars_2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle yyyy data preparation — prep_fars_2019","title":"Handle yyyy data preparation — prep_fars_2019","text":"Handle yyyy data preparation","code":""},{"path":"/reference/prep_fars_2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle yyyy data preparation — prep_fars_2019","text":"","code":"prep_fars_2019(y, wd, rawfiles, prepared_dir, geo_filtered)"},{"path":"/reference/prep_fars_2019.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle yyyy data preparation — prep_fars_2019","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars geo_filtered dataframe filtered geo-identifiers, passed prep_fars","code":""},{"path":"/reference/prep_fars_2019.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle yyyy data preparation — prep_fars_2019","text":"Produces four files year: yyyy_flat.csv, yyyy_multi_acc.csv,     yyyy_multi_veh.csv, yyyy_multi_per.csv","code":""},{"path":"/reference/prep_fars_2020.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle yyyy data preparation — prep_fars_2020","title":"Handle yyyy data preparation — prep_fars_2020","text":"Handle yyyy data preparation","code":""},{"path":"/reference/prep_fars_2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle yyyy data preparation — prep_fars_2020","text":"","code":"prep_fars_2020(y, wd, rawfiles, prepared_dir, geo_filtered)"},{"path":"/reference/prep_fars_2020.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle yyyy data preparation — prep_fars_2020","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars geo_filtered dataframe filtered geo-identifiers, passed prep_fars","code":""},{"path":"/reference/prep_fars_2020.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle yyyy data preparation — prep_fars_2020","text":"Produces four files year: yyyy_flat.csv, yyyy_multi_acc.csv,     yyyy_multi_veh.csv, yyyy_multi_per.csv","code":""},{"path":"/reference/read_basic_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that takes care of basic CSV reading — read_basic_csv","title":"Internal function that takes care of basic CSV reading — read_basic_csv","text":"Internal function takes care basic CSV reading","code":""},{"path":"/reference/read_basic_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that takes care of basic CSV reading — read_basic_csv","text":"","code":"read_basic_csv(x, wd, rawfiles)"},{"path":"/reference/read_basic_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that takes care of basic CSV reading — read_basic_csv","text":"x cleaned name data table (CSV). wd working directory files rawfiles data frame connecting raw filenames cleaned ones.","code":""},{"path":"/reference/usenames.html","id":null,"dir":"Reference","previous_headings":"","what":"(INTERNAL) Use decoded variables instead of encoded ones — usenames","title":"(INTERNAL) Use decoded variables instead of encoded ones — usenames","text":"raw data files include two versions many data elements: encoded one     (using numbers indicate characteristics injury severity,     relation roadway, race, etc.) another already     decoded. variables labelled according convention: x     xname, latter decoded version. internal function     goes given data frame, removing decoded versions     renaming encoded ones remove 'name' suffix.","code":""},{"path":"/reference/usenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(INTERNAL) Use decoded variables instead of encoded ones — usenames","text":"","code":"usenames(df)"},{"path":"/reference/usenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(INTERNAL) Use decoded variables instead of encoded ones — usenames","text":"df Data frame versions variables.","code":""},{"path":"/reference/usenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(INTERNAL) Use decoded variables instead of encoded ones — usenames","text":"data frame encoded variables replaced decoded versions.","code":""},{"path":[]},{"path":"/reference/use_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Use FARS data files — use_fars","title":"Use FARS data files — use_fars","text":"Combine multiple years prepared FARS data stored CSV files bring     current environment.","code":""},{"path":"/reference/use_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use FARS data files — use_fars","text":"","code":"use_fars(prepared_dir = getwd(), years = NULL)"},{"path":"/reference/use_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use FARS data files — use_fars","text":"prepared_dir Directory prepared files currently saved. years (Optional) Years use.","code":""},{"path":"/reference/use_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use FARS data files — use_fars","text":"Returns either single data frame (multi=NULL) list     containing combined flat file data frame specified multi files.","code":""},{"path":[]},{"path":"/reference/use_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use FARS data files — use_fars","text":"","code":"if (FALSE) { myData <- use_fars() }"}]
