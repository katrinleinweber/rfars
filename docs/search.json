<<<<<<< HEAD
[{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Rural Roads","text":"get two years data one state, Virginia. make adjustment standard variable definitions label people driving motorcycles motorcyclists rather drivers motorcycles. makes easier refer motorcyclists later. Note myFARS object list, flat tibble containing required variables: body_typ (vehicle body type) per_typ (person type). counts() function makes easy generate specific types counts. compare_counts() lets quickly run two sets counts comparison purposes.","code":"myFARS <- get_fars(years = 2019:2021, states = \"VA\") myFARS$flat$per_typ <-    ifelse(grepl(\"motorcycle\",                 myFARS$flat$body_typ,                 ignore.case = TRUE),          \"Motorcyclist\",          myFARS$flat$per_typ)"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"basic-counts","dir":"Articles","previous_headings":"","what":"Basic Counts","title":"Rural Roads","text":"number crashes reasonable starting point. use compare_counts()function ggplot() plot annual count crashes fatalities rural urban areas, 2015 2020.","code":"compare_counts(df = myFARS, what = \"crashes\", where = list(states=\"VA\", urb=\"rural\"), where2 = list(states=\"VA\", urb = \"urban\")) %>%  ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~urb) +   labs(x=NULL, y=NULL, title = \"Crashes\", fill=NULL) compare_counts(df = myFARS, what = \"fatalities\", where = list(urb=\"rural\"), where2 = list(urb=\"urban\")) %>%    ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~urb) +   labs(x=NULL, y=NULL, title = \"Fatalities\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-involved-argument","dir":"Articles","previous_headings":"","what":"The involved Argument","title":"Rural Roads","text":"counts() makes easy hone specific crash types using involved argument. can : distracted driver, drowsy driver, police pursuit, motorcycle, pedalcyclist, bicyclist, pedestrian, pedbike, young driver, older driver, speeding, alcohol, drugs, hit run, roadway departure, rollover, large trucks. Specifying involved filter counts matching criterion. example involved=\"distracted driver\" return counts associated crashes involving distracted driver. Multiple values can supplied; , resulting counts satisfy criteria. , combined operator (opposed ). loop options available rfars generate simple plots.","code":"crashfactors <- c(\"distracted driver\", \"drowsy driver\",                    \"police pursuit\", \"motorcycle\", \"pedalcyclist\",                    \"bicyclist\", \"pedestrian\", \"pedbike\",                    \"young driver\", \"older driver\", \"speeding\",                    \"alcohol\", \"drugs\", \"hit and run\",                    \"roadway departure\", \"rollover\", \"large trucks\"                   )  for(crashfactor in crashfactors){      p <-      compare_counts(df = myFARS, what = \"fatalities\", where = list(urb=\"rural\"), where2 = list(urb=\"urban\"), involved = crashfactor) %>%     ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +       geom_col(position=\"dodge\") +       facet_wrap(.~urb) +       geom_label(position = position_dodge(.9), vjust=1) +       labs(title = paste0(\"Fatalities: \", crashfactor))    print(p)    }"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-filteronly-option","dir":"Articles","previous_headings":"","what":"The filterOnly Option","title":"Rural Roads","text":"counts() function filterOnly option, returns pre-summarized data fitting specifications (, , etc.). can useful generating custom counts. example, acc_type (Crash Type) vehicle-level variable. count number crashes acc_type, need prevent -counting (one value acc_type vehicle involved crash). take value associated veh_no 1 (vehicle number 1). reasonable, may appropriate analysis situations.","code":"bind_rows(   counts(myFARS,        what = \"crashes\",        where = list(urb=\"rural\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>% #crash type is on the vehicle-level, this prevents over-counting     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Rural\"),   counts(myFARS,        what = \"crashes\",        where = list(urb=\"urban\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>%     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Urban\")     ) %>%   filter(!is.na(acc_type)) %>%   group_by(where, acc_type) %>% summarize(n=sum(n, na.rm=TRUE)) %>%   tidyr::pivot_wider(names_from = \"where\", values_from = \"n\") %>%   mutate(Total = Urban + Rural,          rural_pct = Rural/Total) %>%   arrange(desc(Total)) %>%   slice(1:20) %>%   arrange(desc(rural_pct)) %>%   mutate(acc_type = reorder(acc_type, rural_pct)) %>%      ggplot(aes(y=acc_type, x=rural_pct, fill=Rural, label=scales::percent(rural_pct, accuracy = 1))) +      geom_col() +      geom_label(hjust=1, fill=\"white\") +   scale_fill_continuous(labels=scales::comma) +     labs(x=NULL, y=NULL,           title = \"20 Most Common Crash Types by Prevalence in Rural Areas\") +     theme(plot.title.position = \"plot\") #> Adding missing grouping variables: `date` #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> Adding missing grouping variables: `date` #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> `summarise()` has grouped output by 'where'. You can override using the #> `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-flat-tibble","dir":"Articles","previous_headings":"","what":"The flat Tibble","title":"Rural Roads","text":"sometimes easiest access data directly, rather counts() function. object created get_fars() list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains 200 variables, can often provide ’s needed. several examples:","code":"myFARS$flat %>%   mutate(     vprofile = ifelse(vprofile %in% c(\"Uphill\", \"Downhill\"), \"Up/downhill\", vprofile),     valign = ifelse(grepl(\"Curve\", valign), \"Curve\", valign)     ) %>%   filter(veh_no == 1, #to avoid over-counting          rur_urb %in% c(\"Rural\", \"Urban\"),          valign %in% c(\"Straight\", \"Curve\"),          !(vprofile %in% c(\"Unknown\", \"Reported as Unknown\", \"Not Reported\"))          ) %>%   select(id, vprofile, valign, rur_urb) %>% unique() %>%   group_by(vprofile, valign, rur_urb) %>%   summarize(n = n()) %>%    ggplot(aes(x=valign, y=vprofile, fill=n, label=scales::comma(n))) +   #geom_tile() +   facet_wrap(.~rur_urb) +   viridis::scale_fill_viridis(alpha=.5) +   geom_label() +   labs(title = \"Roadway Profile and Alignment\") #> `summarise()` has grouped output by 'vprofile', 'valign'. You can override #> using the `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, per_typ) %>%   summarise(n=n()) %>%   filter(n>2) %>%   #mutate(per_typ = stringr::str_wrap(per_typ, 15)) %>%      ggplot(aes(y=per_typ, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     #geom_label(hjust=-1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Person Type and Urbanicity\")  #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\"), sex %in% c(\"Male\", \"Female\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, sex) %>%   summarise(n=n()) %>%   filter(n>90) %>%   mutate(sex = stringr::str_wrap(sex, 15)) %>%      ggplot(aes(x=sex, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     geom_label(vjust=1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Sex and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, hispanic) %>%   summarise(n=n()) %>%   filter(n>10) %>%   mutate(hispanic = stringr::str_wrap(hispanic, 15)) %>%      ggplot(aes(y=hispanic, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     geom_label(hjust=-1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Ethnicity and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   mutate(     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric(),     hour2 = stringr::word(hour, 1, 1, sep = \":\") %>% as.numeric(),     hourm = stringr::str_sub(hour, -2, -1),     hour = ifelse(hourm==\"am\", hour2, hour2+12),     hour = ifelse(hour==24, 12, hour)     ) %>%   filter(grepl(\"(K)\", inj_sev),          rur_urb %in% c(\"Rural\", \"Urban\"),          hour < 24,          age_n <= 90) %>%   group_by(rur_urb, age_n, hour) %>% summarize(n=n()) %>%      ggplot(aes(x=hour, y=age_n, fill=n)) +     geom_tile() +     facet_wrap(.~rur_urb) +     viridis::scale_fill_viridis() +     labs(title = \"Fatalities by Age, Time of Day, and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb', 'age_n'. You can override using #> the `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-multi_per-tibble","dir":"Articles","previous_headings":"","what":"The multi_per Tibble","title":"Rural Roads","text":"flat tibble required information, may one multi_ tibbles. , access multi_per tibble visualize fatalities race.","code":"myFARS$multi_per %>%    filter(name == \"mtm_crsh\") %>%   select(state, st_case, veh_no, per_no, year, mtm_crsh=value) %>%   mutate_at(c(\"st_case\", \"veh_no\", \"per_no\", \"year\"), as.numeric) %>%   inner_join(myFARS$flat) %>%      filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, mtm_crsh) %>%   summarise(n=n()) %>%   filter(n>9) %>%   mutate(mtm_crsh = stringr::str_wrap(mtm_crsh, 25)) %>%      ggplot(aes(y=mtm_crsh, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     #geom_label(vjust=1, position = position_dodge(.9)) +     labs(title = \"Non-Motorist Contributing Circumstances\") #> Joining with `by = join_by(state, st_case, veh_no, per_no, year)` #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steve Jackson. Author, maintainer.","code":""},{"path":"https://s87jackson.github.io/rfars/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jackson S (2023). rfars: Download Analyze Crash Data. R package version 0.3.0, https://github.com/s87jackson/rfars.","code":"@Manual{,   title = {rfars: Download and Analyze Crash Data},   author = {Steve Jackson},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/s87jackson/rfars}, }"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"rfars-","dir":"","previous_headings":"","what":"Download and Analyze Crash Data","title":"Download and Analyze Crash Data","text":"goal rfars facilitate transportation safety analysis simplifying process extracting data official crash databases. National Highway Traffic Safety Administration collects publishes census fatal crashes Fatality Analysis Reporting System sample fatal non-fatal crashes Crash Report Sampling System (evolution General Estimates System). Fatality Injury Reporting System Tool allows users query databases, can produce simple tables graphs. suffices simple analysis, often leaves researchers wanting . Digging deeper, however, involves time-consuming process downloading annual ZIP files attempting stitch together - first combing immense data dictionaries determine required variables table names. rfars allows users download FARS GES/CRSS data back 2011 just one line code. result full, rich dataset ready mapping, modeling, downstream analysis. Helper functions also provided produce common counts comparisons.","code":""},{"path":"https://s87jackson.github.io/rfars/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Analyze Crash Data","text":"can install latest version rfars GitHub : CRAN stable release : load rfars helpful packages:","code":"# install.packages(\"devtools\") devtools::install_github(\"s87jackson/rfars\") install.packages(\"rfars\") library(rfars) library(dplyr) library(ggplot2) library(leaflet) library(leaflet.extras)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"getting-and-using-fars-data","dir":"","previous_headings":"","what":"Getting and Using FARS Data","title":"Download and Analyze Crash Data","text":"Use get_fars() function bring FARS data current environment optionally save RDS file future use (faster downloading anew). done () downloading data temporary directory, (b) downloading permanent directory, (c) importing permanent directory. data downloaded permanent directory, function look rather downloading data . year data requested found, R ask permission download missing data. get three years data Virginia: returns ‘FARS’ object: list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains variables just one value per crash (“accident”), vehicle, person (e.g., weather conditions, travel speed, age). row corresponds person involved crash. may multiple people /vehicles involved one crash, variable-values repeated within crash vehicle. crash uniquely identified id, combination year st_case. Note st_case unique across years, example, st_case 510001 appear year. id variable attempts avoid issue. Please review FARS Analytical User’s Manual information. multi_ tibbles contain variables may varying number values entity (e.g., driver impairments, vehicle events, weather conditions time crash). tibble requisite data elements corresponding entity: multi_acc includes st_case year, multi_veh adds veh_no (vehicle number), multi_per adds per_no (person number). top name-value pairs tibble shown . events tibble provides sequence numbered events vehicle crash. codebook tibble provides searchable codebook data, useful know concept ’re looking variable describes .","code":"myFARS <- get_fars(years = 2019:2021, states = \"VA\") glimpse(myFARS$flat) #> Rows: 5,465 #> Columns: 199 #> $ year          <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 20… #> $ state         <chr> \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Virgini… #> $ st_case       <dbl> 510001, 510001, 510002, 510002, 510003, 510003, 510004, … #> $ id            <dbl> 2019510001, 2019510001, 2019510002, 2019510002, 20195100… #> $ veh_no        <dbl> 0, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1,… #> $ per_no        <dbl> 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,… #> $ county        <dbl> 760, 760, 137, 137, 53, 53, 107, 107, 175, 175, 175, 157… #> $ city          <dbl> 2060, 2060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19… #> $ lon           <dbl> -77.48444, -77.48444, -77.94240, -77.94240, -77.66604, -… #> $ lat           <dbl> 37.50924, 37.50924, 38.19840, 38.19840, 37.00784, 37.007… #> $ acc_type      <chr> NA, \"C13-Single Driver-Forward Impact-Pedestrian/ Animal… #> $ age           <chr> \"17 Years\", \"42 Years\", \"83 Years\", \"44 Years\", \"50 Year… #> $ air_bag       <chr> \"Not a Motor Vehicle Occupant\", \"Reported as Deployment … #> $ alc_det       <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Rep… #> $ alc_res       <chr> \"0.000 % BAC\", \"Test Not Given\", \"0.000 % BAC\", \"Test No… #> $ alc_status    <chr> \"Test Given\", \"Test Not Given\", \"Test Given\", \"Test Not … #> $ arr_hour      <chr> \"Unknown EMS Scene Arrival Hour\", \"Unknown EMS Scene Arr… #> $ arr_min       <chr> \"Unknown EMS Scene Arrival Minutes\", \"Unknown EMS Scene … #> $ atst_typ      <chr> \"Blood\", \"Test Not Given\", \"Blood\", \"Test Not Given\", \"T… #> $ bikecgp       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikectype     <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikedir       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikeloc       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikepos       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ body_typ      <chr> NA, \"4-door sedan, hardtop\", \"2-door sedan,hardtop,coupe… #> $ bus_use       <chr> NA, \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", … #> $ cargo_bt      <chr> NA, \"Not Applicable (N/A)\", \"Not Applicable (N/A)\", \"Not… #> $ cdl_stat      <chr> NA, \"No (CDL)\", \"No (CDL)\", \"No (CDL)\", \"No (CDL)\", \"No … #> $ cityname      <chr> \"RICHMOND\", \"RICHMOND\", \"NOT APPLICABLE\", \"NOT APPLICABL… #> $ countyname    <chr> \"RICHMOND (760)\", \"RICHMOND (760)\", \"ORANGE (137)\", \"ORA… #> $ day           <dbl> 1, 1, 2, 2, 3, 3, 4, 4, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 6,… #> $ day_week      <chr> \"Tuesday\", \"Tuesday\", \"Wednesday\", \"Wednesday\", \"Thursda… #> $ death_da      <chr> \"1\", \"Not Applicable (Non-Fatal)\", \"2\", \"Not Applicable … #> $ death_hr      <chr> \"6:00-6:59\", \"Not Applicable (Non-fatal)\", \"15:00-15:59\"… #> $ death_mn      <chr> \"32\", \"Not Applicable (Non-fatal)\", \"35\", \"Not Applicabl… #> $ death_mo      <chr> \"January\", \"Not Applicable (Non-Fatal)\", \"January\", \"Not… #> $ death_tm      <chr> NA, \"Not Applicable (Non-fatal)\", NA, \"Not Applicable (N… #> $ death_yr      <chr> \"2019\", \"Not Applicable (Non-fatal)\", \"2019\", \"Not Appli… #> $ deaths        <dbl> NA, 0, 1, 0, 1, 1, NA, 0, 1, 1, 0, NA, 0, 1, 1, 0, NA, 0… #> $ deformed      <chr> NA, \"Reported as Unknown\", \"Disabling Damage\", \"Disablin… #> $ doa           <chr> \"Not Applicable\", \"Not Applicable\", \"Died at Scene\", \"No… #> $ dr_drink      <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"Yes\", \"No\", \"No\",… #> $ dr_hgt        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ dr_pres       <chr> NA, \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", NA, \"Yes\", \"Yes\",… #> $ dr_wgt        <chr> NA, \"160 lbs.\", \"220 lbs.\", \"220 lbs.\", \"170 lbs.\", \"170… #> $ dr_zip        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ drinking      <chr> \"Not Reported\", \"Reported as Unknown\", \"No (Alcohol Not … #> $ drug_det      <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Rep… #> $ drugs         <chr> \"Reported as Unknown\", \"Reported as Unknown\", \"No (drugs… #> $ drunk_dr      <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ dstatus       <chr> \"Test Given\", \"Test Not Given\", \"Test Given\", \"Test Not … #> $ ej_path       <chr> \"Ejection Path Not Applicable\", \"Ejection Path Not Appli… #> $ ejection      <chr> \"Not Applicable\", \"Not Ejected\", \"Not Ejected\", \"Not Eje… #> $ emer_use      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ extricat      <chr> \"Not Extricated or Not Applicable\", \"Not Extricated or N… #> $ fatals        <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ fire_exp      <chr> NA, \"No or Not Reported\", \"No or Not Reported\", \"No or N… #> $ first_mo      <chr> NA, \"October\", \"No Record\", \"No Record\", \"No Record\", \"N… #> $ first_yr      <chr> NA, \"2016\", \"No Record\", \"No Record\", \"No Record\", \"No R… #> $ func_sys      <chr> \"Principal Arterial - Other\", \"Principal Arterial - Othe… #> $ gvwr          <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ harm_ev       <chr> \"Pedestrian\", \"Pedestrian\", \"Motor Vehicle In-Transport\"… #> $ haz_cno       <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_id        <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_inv       <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\", … #> $ haz_plac      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_rel       <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ helm_mis      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ helm_use      <chr> \"Not a Motor Vehicle Occupant\", \"Not Applicable\", \"Not A… #> $ hispanic      <chr> \"Non-Hispanic\", \"Not A Fatality (not Applicable)\", \"Non-… #> $ hit_run       <chr> NA, \"Yes\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\",… #> $ hosp_hr       <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ hosp_mn       <chr> \"Unknown EMS Hospital Arrival Time\", \"Unknown EMS Hospit… #> $ hospital      <chr> \"EMS Unknown Mode\", \"Not Transported\", \"Not Transported\"… #> $ hour          <chr> \"5:00am-5:59am\", \"5:00am-5:59am\", \"3:00pm-3:59pm\", \"3:00… #> $ impact1       <chr> NA, \"12 Clock Point\", \"12 Clock Point\", \"12 Clock Point\"… #> $ inj_sev       <chr> \"Fatal Injury (K)\", \"No Apparent Injury (O)\", \"Fatal Inj… #> $ j_knife       <chr> NA, \"Not an Articulated Vehicle\", \"Not an Articulated Ve… #> $ l_compl       <chr> NA, \"Valid license for this class vehicle\", \"Valid licen… #> $ l_endors      <chr> NA, \"No Endorsements required for this vehicle\", \"No End… #> $ l_restri      <chr> NA, \"Restrictions, Compliance Unknown\", \"No Restrictions… #> $ l_state       <chr> NA, \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Vir… #> $ l_status      <chr> NA, \"Valid\", \"Valid\", \"Valid\", \"Valid\", \"Valid\", NA, \"Va… #> $ l_type        <chr> NA, \"Full Driver License\", \"Full Driver License\", \"Full … #> $ lag_hrs       <chr> NA, \"Unknown\", NA, \"Unknown\", \"Unknown\", NA, NA, \"Unknow… #> $ lag_mins      <chr> NA, \"Unknown\", NA, \"Unknown\", \"Unknown\", NA, NA, \"Unknow… #> $ last_mo       <chr> NA, \"March\", \"No Record\", \"No Record\", \"No Record\", \"No … #> $ last_yr       <chr> NA, \"2018\", \"No Record\", \"No Record\", \"No Record\", \"No R… #> $ lgt_cond      <chr> \"Dark - Lighted\", \"Dark - Lighted\", \"Daylight\", \"Dayligh… #> $ location      <chr> \"Not at Intersection - On Roadway, Not in Marked Crosswa… #> $ m_harm        <chr> NA, \"Pedestrian\", \"Motor Vehicle In-Transport\", \"Motor V… #> $ mak_mod       <chr> NA, \"Chevrolet Malibu/Malibu Maxx\", \"Pontiac Grand AM\", … #> $ make          <chr> NA, \"Chevrolet\", \"Pontiac\", \"Toyota\", \"Chevrolet\", \"Chev… #> $ man_coll      <chr> \"The First Harmful Event was Not a Collision with a Moto… #> $ mcarr_i1      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ mcarr_i2      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ mcarr_id      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ milept        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ minute        <dbl> 48, 48, 35, 35, 5, 5, 30, 30, 47, 47, 47, 5, 5, 36, 36, … #> $ mod_year      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ model         <dbl> NA, 37, 18, 46, 473, 473, NA, 402, 471, 471, 482, NA, 40… #> $ month         <chr> \"January\", \"January\", \"January\", \"January\", \"January\", \"… #> $ motdir        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ motman        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ nhs           <chr> \"This section IS ON the NHS\", \"This section IS ON the NH… #> $ nmhelmet      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmlight       <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmothpre      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmothpro      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmpropad      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmrefclo      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ not_hour      <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ not_min       <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ numoccs       <chr> NA, \"Unknown\", \"01\", \"01\", \"02\", \"02\", NA, \"01\", \"02\", \"… #> $ owner         <chr> NA, \"Driver (in this crash) was  Registered Owner\", \"Dri… #> $ p_crash1      <chr> NA, \"Going Straight\", \"Going Straight\", \"Going Straight\"… #> $ p_crash2      <chr> NA, \"Pedestrian in road\", \"Over the lane line on left si… #> $ p_crash3      <chr> NA, \"Unknown/Not Reported\", \"No Avoidance Maneuver\", \"No… #> $ pbcwalk       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pbswalk       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pbszone       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pcrash4       <chr> NA, \"Tracking\", \"Tracking\", \"Tracking\", \"Skidding latera… #> $ pcrash5       <chr> NA, \"Stayed in original travel lane\", \"Stayed on roadway… #> $ pedcgp        <chr> \"Pedestrian in Roadway - Circumstances Unknown\", NA, NA,… #> $ pedctype      <chr> \"Lying in Roadway\", NA, NA, NA, NA, NA, \"Walking/Running… #> $ peddir        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ pedleg        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ pedloc        <chr> \"Not At Intersection\", NA, NA, NA, NA, NA, \"Not At Inter… #> $ pedpos        <chr> \"Travel Lane\", NA, NA, NA, NA, NA, \"Travel Lane\", NA, NA… #> $ peds          <dbl> 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,… #> $ pedsnr        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ per_typ       <chr> \"Pedestrian\", \"Driver of a Motor Vehicle In-Transport\", … #> $ permvit       <dbl> 1, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 1,… #> $ pernotmvit    <dbl> 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,… #> $ persons       <dbl> 1, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 1,… #> $ prev_acc      <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ prev_dwi      <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_oth      <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_spd      <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ prev_sus1     <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_sus2     <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_sus3     <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ pvh_invl      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ rail          <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"N… #> $ rd_owner      <chr> \"City or Municipal Highway Agency\", \"City or Municipal H… #> $ reg_stat      <chr> NA, \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Vir… #> $ rel_road      <chr> \"On Roadway\", \"On Roadway\", \"On Roadway\", \"On Roadway\", … #> $ reljct1       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N… #> $ reljct2       <chr> \"Non-Junction\", \"Non-Junction\", \"Non-Junction\", \"Non-Jun… #> $ rest_mis      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ rest_use      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ rolinloc      <chr> NA, \"No Rollover\", \"No Rollover\", \"No Rollover\", \"On Med… #> $ rollover      <chr> NA, \"No Rollover\", \"No Rollover\", \"No Rollover\", \"Rollov… #> $ route         <chr> \"U.S. Highway\", \"U.S. Highway\", \"U.S. Highway\", \"U.S. Hi… #> $ rur_urb       <chr> \"Urban\", \"Urban\", \"Rural\", \"Rural\", \"Rural\", \"Rural\", \"R… #> $ sch_bus       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N… #> $ seat_pos      <chr> \"Not a Motor Vehicle Occupant\", \"Front Seat, Left Side\",… #> $ sex           <chr> \"Female\", \"Female\", \"Male\", \"Male\", \"Male\", \"Male\", \"Fem… #> $ sp_jur        <chr> \"No Special Jurisdiction\", \"No Special Jurisdiction\", \"N… #> $ spec_use      <chr> NA, \"No Special Use\", \"No Special Use\", \"No Special Use\"… #> $ speedrel      <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\", … #> $ statename     <chr> \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Virgini… #> $ str_veh       <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,… #> $ tow_veh       <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ towed         <chr> NA, \"Not Towed\", \"Towed Due to Disabling Damage\", \"Towed… #> $ trav_sp       <chr> NA, \"Not Reported\", \"055 MPH\", \"055 MPH\", \"073 MPH\", \"07… #> $ trlr1vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ trlr2vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ trlr3vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ tway_id       <chr> \"US-60\", \"US-60\", \"US-522\", \"US-522\", \"I-85\", \"I-85\", \"C… #> $ tway_id2      <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"TUCKER SWAMP RD\", \"TUCK… #> $ typ_int       <chr> \"Not an Intersection\", \"Not an Intersection\", \"Not an In… #> $ underide      <chr> NA, \"No Underride or Override Noted\", \"No Underride or O… #> $ unittype      <chr> NA, \"Motor Vehicle In-Transport (Inside or Outside the T… #> $ v_config      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ valign        <chr> NA, \"Straight\", \"Straight\", \"Straight\", \"Straight\", \"Str… #> $ ve_forms      <dbl> 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1,… #> $ ve_total      <dbl> 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1,… #> $ vin           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vnum_lan      <chr> NA, \"Two lanes\", \"Two lanes\", \"Two lanes\", \"Two lanes\", … #> $ vpavetyp      <chr> NA, \"Blacktop, Bituminous, or Asphalt\", \"Blacktop, Bitum… #> $ vprofile      <chr> NA, \"Level\", \"Grade, Unknown Slope\", \"Grade, Unknown Slo… #> $ vspd_lim      <chr> NA, \"35 MPH\", \"55 MPH\", \"55 MPH\", \"70 MPH\", \"70 MPH\", NA… #> $ vsurcond      <chr> NA, \"Dry\", \"Dry\", \"Dry\", \"Wet\", \"Wet\", NA, \"Dry\", \"Dry\",… #> $ vtcont_f      <chr> NA, \"No Controls\", \"No Controls\", \"No Controls\", \"No Con… #> $ vtrafcon      <chr> NA, \"No Controls\", \"No Controls\", \"No Controls\", \"No Con… #> $ vtrafway      <chr> NA, \"Two-Way,  Divided, Positive  Median Barrier\", \"Two-… #> $ work_inj      <chr> \"No\", \"Not Applicable (not a fatality)\", \"No\", \"Not Appl… #> $ wrk_zone      <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", … #> $ gvwr_from     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ gvwr_to       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ icfinalbody   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr1gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr2gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr3gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicbodyclass <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicmake      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicmodel     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ underoverride <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … bind_rows(      myFARS$multi_acc %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_acc\"),   myFARS$multi_veh %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_veh\"),   myFARS$multi_per %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_per\"),    ) %>%      select(table, name, value, n) #> # A tibble: 30 × 4 #>    table     name     value                                                    n #>    <chr>     <chr>    <chr>                                                <int> #>  1 multi_acc weather  Rain                                                   182 #>  2 multi_acc weather1 Rain                                                    78 #>  3 multi_acc crashrf  Police Pursuit Involved                                 39 #>  4 multi_acc crashrf  Motor Vehicle struck by falling cargo,or something …    38 #>  5 multi_acc weather  Fog, Smog, Smoke                                        18 #>  6 multi_acc cf1      Police Pursuit Involved                                 17 #>  7 multi_acc crashrf  Indication of a Stalled/Disabled Vehicle                15 #>  8 multi_acc crashrf  Recent/Previous Crash scene Nearby                      15 #>  9 multi_acc weather  Clear                                                   13 #> 10 multi_acc weather1 Fog, Smog, Smoke                                        10 #> # ℹ 20 more rows head(myFARS$events, 10) #>       state st_case veh_no               aoi                        soe #> 1  Virginia  510001      1    12 Clock Point                 Pedestrian #> 2  Virginia  510002      1 Non-Harmful Event           Cross Centerline #> 3  Virginia  510002      1    12 Clock Point Motor Vehicle In-Transport #> 4  Virginia  510002      2    12 Clock Point Motor Vehicle In-Transport #> 5  Virginia  510003      1 Non-Harmful Event     Ran Off Roadway - Left #> 6  Virginia  510003      1 Non-Harmful Event        Re-entering Roadway #> 7  Virginia  510003      1 Non-Harmful Event     Ran Off Roadway - Left #> 8  Virginia  510003      1    12 Clock Point                 Embankment #> 9  Virginia  510003      1     Non-Collision          Rollover/Overturn #> 10 Virginia  510004      1    12 Clock Point                 Pedestrian #>    veventnum year #> 1          1 2019 #> 2          1 2019 #> 3          2 2019 #> 4          1 2019 #> 5          1 2019 #> 6          2 2019 #> 7          3 2019 #> 8          4 2019 #> 9          5 2019 #> 10         1 2019 # View(myFARS$codebook)  myFARS$codebook %>%   filter(name_rfars == \"lgt_cond\") %>% distinct() %>% head(10) #>    source year     file name_ncsa name_rfars           label value #> 1    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     1 #> 2    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     2 #> 3    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     3 #> 4    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     4 #> 5    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     5 #> 6    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     6 #> 7    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     7 #> 8    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     8 #> 9    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     9 #> 10   FARS 2020 accident  LGT_COND   lgt_cond Light Condition     1 #>                value_label #> 1                 Daylight #> 2       Dark - Not Lighted #> 3           Dark - Lighted #> 4                     Dawn #> 5                     Dusk #> 6  Dark - Unknown Lighting #> 7                    Other #> 8             Not Reported #> 9      Reported as Unknown #> 10                Daylight"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"counts","dir":"","previous_headings":"Getting and Using FARS Data","what":"Counts","title":"Download and Analyze Crash Data","text":"first step many transportation safety analyses involves counting number relevant crashes, fatalities, people involved. counts() lets users specify count, count (rural/urban /specified states regions), include, interval count (annually monthly), factors involved crashes. returns simple tibble can easily piped ggplot() quickly visualize counts.     can combine two counts() results make comparison. compare number speeding-related fatalities rural urban Virginia:","code":"my_counts <- counts(   myFARS,   what = \"crashes\",   interval = c(\"year\")   )   head(my_counts) #> # A tibble: 3 × 8 #> # Groups:   year [3] #>    year date           n what    states region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2019 2019-01-01   774 crashes all    all    all   all   #> 2  2020 2020-01-01   796 crashes all    all    all   all   #> 3  2021 2021-01-01   906 crashes all    all    all   all  my_counts %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Fatal Crashes in Virginia\") counts(   myFARS,   what = \"fatalities\",   interval = c(\"year\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Fatalities in Virginia\") counts(myFARS,        what = \"fatalities\",        where = list(urb=\"rural\"),        interval = c(\"year\")        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Rural Fatalities in Virginia\") counts(myFARS,        what = \"fatalities\",        where = list(urb=\"rural\"),        interval = c(\"year\"),        involved = \"speeding\"        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Speeding-Related Fatalities in Rural Virginia\") compare_counts(   df = myFARS,   involved = \"speeding\",   what = \"fatalities\",   where = list(urb=\"rural\"),   where2 = list(urb=\"urban\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     facet_wrap(.~urb) +     labs(x=NULL, y=NULL, title = \"Speeding-Related Fatalities in Virginia\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"mapping","dir":"","previous_headings":"Getting and Using FARS Data","what":"Mapping","title":"Download and Analyze Crash Data","text":"can take advantage access full data maps. map pedestrian bicyclist fatalities Virginia:  Drug-related crashes:  Young drivers:","code":"counts(   myFARS,    what = \"crashes\",    involved = \"pedbike\",    filterOnly = TRUE   ) %>%  leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively counts(   myFARS,    what = \"crashes\",    involved = \"drugs\",    filterOnly = TRUE   ) %>%   filter(!is.na(lat), !is.na(lon)) %>%   filter(lat < 90, lon < 900) %>% leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively counts(   myFARS,    what = \"crashes\",    involved = \"young driver\",    filterOnly = TRUE   ) %>%   filter(!is.na(lat), !is.na(lon)) %>%   filter(lat < 90, lon < 900) %>% leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"modeling","dir":"","previous_headings":"Getting and Using FARS Data","what":"Modeling","title":"Download and Analyze Crash Data","text":"access full dataset also allows us develop statistical models. fit simple model injury severity function age restraint use. results indicate injury severity increases age, seat belts used properly.","code":"# table(myFARS$flat$inj_sev) # table(myFARS$flat$rest_use, useNA = \"ifany\") # table(myFARS$flat$per_typ, useNA = \"ifany\")  model_data <-   myFARS$flat %>%   filter(rest_use %in% c(\"Lap Belt Only Used\",                          \"Shoulder Belt Only Used\",                          \"None Used / Not Applicable\",                          \"None Used/Not Applicable\",                          \"Shoulder and Lap Belt Used\"),          per_typ %in% c(\"Driver of a Motor Vehicle In-Transport\",                         \"Passenger of a Motor Vehicle In-Transport\")          ) %>%   mutate(     rest_use = case_when(       rest_use %in% c(\"Lap Belt Only Used\", \"Shoulder Belt Only Used\") ~ \"Partial\",       rest_use %in% c(\"None Used / Not Applicable\", \"None Used/Not Applicable\") ~ \"None\",       rest_use %in% c(\"Shoulder and Lap Belt Used\") ~ \"Full\",       TRUE ~ \"Unknown\"       ) %>%       as.factor() %>%       relevel(ref = \"Full\"),     kabco = case_when(       inj_sev == \"Fatal Injury (K)\" ~ 4,       inj_sev %in% c(\"Suspected Serious Injury (A)\",                       \"Suspected Serious Injury(A)\") ~ 3,       inj_sev %in% c(\"Suspected Minor Injury (B)\",                       \"Suspected Minor Injury(B)\") ~ 2,       inj_sev == \"Possible Injury (C)\" ~ 1,       inj_sev == \"No Apparent Injury (O)\" ~ 0,       TRUE ~ as.numeric(NA)       ),     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric())   my_model <- lm(kabco ~ age_n + rest_use, data = model_data)   stargazer::stargazer(my_model, type = \"html\") new_data <- expand.grid(   age_n = c(20, 60),   rest_use = factor(c(\"Full\", \"Partial\", \"None\"), levels = c(\"Full\", \"Partial\", \"None\"), ordered = TRUE) )  new_data %>%   mutate(pred = predict(my_model, newdata = new_data),          age = paste0(age_n, \" yrs\")) %>%   ggplot(aes(x=rest_use, y=pred)) +     geom_col() +     facet_wrap(.~age) +     scale_y_continuous(       limits = c(0,4), breaks = 0:4, labels = c(\"O\", \"C\", \"B\", \"A\", \"K\"), expand = expansion()) +     theme(panel.grid = element_blank(),           panel.grid.major.y = element_line(c(\"black\")),           axis.ticks = element_blank()) +     labs(x=\"\", y=\"\", title = \"Predicted Injury Severity by Age and Restraint Use\",          caption = \"Full = correctly used seatbelt, partial = partially correctly used, none = no seatbelt.\")"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"getting-and-using-gescrss-data","dir":"","previous_headings":"","what":"Getting and Using GES/CRSS Data","title":"Download and Analyze Crash Data","text":"Use get_grscrss() function bring GES/CRSS data current environment optionally save RDS file future use (faster downloading anew). done () downloading data temporary directory, (b) downloading permanent directory, (c) importing permanent directory. data downloaded permanent directory, function look rather downloading data . year data requested found, R ask permission download missing data. get three years data. specify region can confirm results official data. returns ‘GESCRSS’ object: list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains variables just one value per crash (“accident”), vehicle, person (e.g., weather conditions, travel speed, age). row corresponds person involved crash. may multiple people /vehicles involved one crash, variable-values repeated within crash vehicle. crash uniquely identified id, combination year casenum. Please review CRSS Analytical User’s Manual information. multi_ tibbles contain variables may varying number values entity (e.g., driver impairments, vehicle events, weather conditions time crash). tibble requisite data elements corresponding entity: multi_acc includes st_case year, multi_veh adds veh_no (vehicle number), multi_per adds per_no (person number). top three name-value pairs tibble shown . events tibble provides sequence numbered events vehicle crash. codebook tibble provides searchable codebook data, useful know concept ’re looking variable describes .","code":"myGESCRSS <- get_gescrss(years = 2019:2021) #> Warning in dir.create(paste0(dest_raw_y, \"/format-32\")): #> 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpEnDbQ6\\GESCRSS data\\raw\\2020\\format-32' #> already exists #> Warning in dir.create(paste0(dest_raw_y, \"/format-64\")): #> 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpEnDbQ6\\GESCRSS data\\raw\\2020\\format-64' #> already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. glimpse(myGESCRSS$flat) #> Rows: 401,162 #> Columns: 144 #> $ year           <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2… #> $ region         <chr> \"South (MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL,… #> $ psu            <dbl> 75, 63, 63, 63, 63, 63, 63, 65, 65, 12, 12, 12, 12, 75,… #> $ psustrat       <dbl> 19, 16, 16, 16, 16, 16, 16, 13, 13, 12, 12, 12, 12, 19,… #> $ casenum        <dbl> 201901174219, 201901176655, 201901176655, 201901176655,… #> $ weight         <dbl> 203.66512, 59.07346, 59.07346, 59.07346, 59.07346, 59.0… #> $ id             <dbl> 2.019202e+15, 2.019202e+15, 2.019202e+15, 2.019202e+15,… #> $ veh_no         <dbl> 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 0, 1, 1, 1… #> $ per_no         <dbl> 1, 1, 2, 3, 4, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2… #> $ acc_type       <chr> \"B7-Single Driver-Left Roadside Departure-Control/Tract… #> $ age            <chr> \"39 Years\", \"20 Years\", \"19 Years\", \"47 Years\", \"39 Yea… #> $ air_bag        <chr> \"Not Deployed\", \"Not Deployed\", \"Not Deployed\", \"Not De… #> $ alc_res        <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ alc_status     <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ alcohol        <chr> \"No Alcohol Involved\", \"No Alcohol Involved\", \"No Alcoh… #> $ atst_typ       <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ bikecgp        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikectype      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikedir        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikeloc        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikepos        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ body_typ       <chr> \"Light Pickup\", \"4-door sedan, hardtop\", \"4-door sedan,… #> $ bus_use        <chr> \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"No… #> $ cargo_bt       <chr> \"Not Applicable (N/A)\", \"Not Applicable (N/A)\", \"Not Ap… #> $ day_week       <chr> \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", … #> $ deformed       <chr> \"Disabling Damage\", \"Functional Damage\", \"Functional Da… #> $ dr_pres        <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",… #> $ dr_zip         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ drinking       <chr> \"No (Alcohol Not Involved)\", \"No (Alcohol Not Involved)… #> $ drugs          <chr> \"No (drugs not involved)\", \"Not Reported\", \"Not Reporte… #> $ ejection       <chr> \"Not Ejected\", \"Not Ejected\", \"Not Ejected\", \"Not Eject… #> $ emer_use       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ fire_exp       <chr> \"No or Not Reported\", \"No or Not Reported\", \"No or Not … #> $ gvwr           <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ harm_ev        <chr> \"Curb\", \"Motor Vehicle In-Transport\", \"Motor Vehicle In… #> $ haz_cno        <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_id         <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_inv        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ haz_plac       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_rel        <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ helm_mis       <chr> \"None Used/Not Applicable\", \"None Used/Not Applicable\",… #> $ helm_use       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ hit_run        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ hospital       <chr> \"Not Transported\", \"Not Transported\", \"Other\", \"Not Tra… #> $ hour           <chr> \"8:00am-8:59am\", \"2:00am-2:59am\", \"2:00am-2:59am\", \"2:0… #> $ impact1        <chr> \"3 Clock Point\", \"Right\", \"Right\", \"Right\", \"Right\", \"1… #> $ inj_sev        <chr> \"No Apparent Injury (O)\", \"No Apparent Injury (O)\", \"Po… #> $ int_hwy        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ j_knife        <chr> \"Not an Articulated Vehicle\", \"Not an Articulated Vehic… #> $ lgt_cond       <chr> \"Daylight\", \"Dark - Lighted\", \"Dark - Lighted\", \"Dark -… #> $ location       <chr> \"Occupant of a Motor Vehicle\", \"Occupant of a Motor Veh… #> $ m_harm         <chr> \"Rollover/Overturn\", \"Motor Vehicle In-Transport\", \"Mot… #> $ mak_mod        <chr> \"Ford Ranger\", \"Dodge Dart (2013 on. See model 001 for … #> $ make           <chr> \"Ford\", \"Dodge\", \"Dodge\", \"Dodge\", \"Dodge\", \"Honda\", \"H… #> $ man_coll       <chr> \"The First Harmful Event was Not a Collision with a Mot… #> $ max_sev        <chr> \"No Apparent Injury (O)\", \"Possible Injury (C)\", \"Possi… #> $ max_vsev       <chr> \"No Apparent Injury (O)\", \"Possible Injury (C)\", \"Possi… #> $ mcarr_i1       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ mcarr_i2       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ mcarr_id       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ minute         <dbl> 6, 12, 12, 12, 12, 12, 12, 33, 33, 8, 41, 41, 41, 42, 4… #> $ mod_year       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ model          <dbl> 471, 29, 29, 29, 29, 402, 402, 402, 481, 51, 422, 32, 3… #> $ month          <chr> \"January\", \"January\", \"January\", \"January\", \"January\", … #> $ motdir         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ motman         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmhelmet       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmlight        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmothpre       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmothpro       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmpropad       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmrefclo       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ num_inj        <chr> \"No Person Injured/Property Damage Only Crash\", NA, NA,… #> $ num_injv       <chr> \"No Person Injured in Vehicle\", NA, NA, NA, NA, NA, NA,… #> $ numoccs        <chr> \"01\", \"04\", \"04\", \"04\", \"04\", \"02\", \"02\", \"01\", \"01\", \"… #> $ p_crash1       <chr> \"Accelerating in Road\", \"Going Straight\", \"Going Straig… #> $ p_crash2       <chr> \"Traveling too fast for conditions or Road Configuratio… #> $ p_crash3       <chr> \"Unknown/Not Reported\", \"Unknown/Not Reported\", \"Unknow… #> $ pbcwalk        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbptype        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbswalk        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbszone        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pcrash4        <chr> \"Skidding Laterally, Rotation Direction Unknown\", \"Trac… #> $ pcrash5        <chr> \"Departed roadway\", \"Stayed in original travel lane\", \"… #> $ pedcgp         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedctype       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ peddir         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedleg         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedloc         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedpos         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ peds           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0… #> $ pedsnr         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ per_typ        <chr> \"Driver of a Motor Vehicle In-Transport\", \"Driver of a … #> $ permvit        <dbl> 1, 6, 6, 6, 6, 6, 6, 2, 2, 1, 3, 3, 3, 2, 2, 1, 1, 3, 3… #> $ pernotmvit     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0… #> $ psu_var        <dbl> 75, 63, 63, 63, 63, 63, 63, 65, 65, 12, 12, 12, 12, 75,… #> $ pvh_invl       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ rel_road       <chr> \"On Median\", \"On Roadway\", \"On Roadway\", \"On Roadway\", … #> $ reljct1        <chr> \"Yes\", \"Not Reported\", \"Not Reported\", \"Not Reported\", … #> $ reljct2        <chr> \"Entrance/Exit Ramp Related\", \"Intersection\", \"Intersec… #> $ rest_mis       <chr> \"No Indication of Mis-Use\", \"No Indication of Mis-Use\",… #> $ rest_use       <chr> \"Shoulder and Lap Belt Used\", \"Shoulder and Lap Belt Us… #> $ rolinloc       <chr> \"On Median/Separator\", \"No Rollover\", \"No Rollover\", \"N… #> $ rollover       <chr> \"Rollover, Tripped by Object/Vehicle\", \"No Rollover\", \"… #> $ sch_bus        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ seat_pos       <chr> \"Front Seat, Left Side\", \"Front Seat, Left Side\", \"Fron… #> $ sex            <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male… #> $ spec_use       <chr> \"No Special Use\", \"No Special Use\", \"No Special Use\", \"… #> $ speedrel       <chr> \"Yes, Too Fast for Conditions\", \"No\", \"No\", \"No\", \"No\",… #> $ str_veh        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0… #> $ tow_veh        <chr> \"No Trailing Units\", \"No Trailing Units\", \"No Trailing … #> $ towed          <chr> \"Towed Due to Disabling Damage\", \"Towed Not Due to Disa… #> $ trav_sp        <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Re… #> $ typ_int        <chr> \"Not an Intersection\", \"Four-Way Intersection\", \"Four-W… #> $ unittype       <chr> \"Motor Vehicle In-Transport (Inside or Outside the Traf… #> $ urbanicity     <chr> \"Rural Area\", \"Rural Area\", \"Rural Area\", \"Rural Area\",… #> $ v_config       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ valign         <chr> \"Curve - Right\", \"Straight\", \"Straight\", \"Straight\", \"S… #> $ ve_forms       <dbl> 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2… #> $ ve_total       <dbl> 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2… #> $ veh_alch       <chr> \"No Alcohol Involved\", \"No Alcohol Involved\", \"No Alcoh… #> $ vnum_lan       <chr> \"Not Reported\", \"Six lanes\", \"Six lanes\", \"Six lanes\", … #> $ vprofile       <chr> \"Level\", \"Grade, Unknown Slope\", \"Grade, Unknown Slope\"… #> $ vspd_lim       <chr> \"35 MPH\", \"40 MPH\", \"40 MPH\", \"40 MPH\", \"40 MPH\", \"Not … #> $ vsurcond       <chr> \"Wet\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\",… #> $ vtcont_f       <chr> \"Device Functioning Properly\", \"Device Functioning Prop… #> $ vtrafcon       <chr> \"Yield Sign\", \"Flashing Traffic Control Signal\", \"Flash… #> $ vtrafway       <chr> \"Entrance/Exit Ramp\", \"Two-Way, Not Divided\", \"Two-Way,… #> $ wrk_zone       <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\",… #> $ gvwr_from      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ gvwr_to        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ ic_final_body  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ icfinalbody    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ reljct1_im     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr1gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr2gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr3gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picbodyclass <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picmake      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picmodel     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicbodyclass  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicmake       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicmodel      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ underoverride  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… myGESCRSS$multi_acc %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 44 × 3 #> # Groups:   name [15] #>    name    value                                                               n #>    <chr>   <chr>                                                           <int> #>  1 cf1     Motor Vehicle struck by falling cargo,or something that came l…   540 #>  2 cf1     Regular Congestion                                                433 #>  3 cf1     Non-occupant struck vehicle                                       255 #>  4 cf2     Indication of a Stalled/Disabled Vehicle                           47 #>  5 cf2     Recent/Previous Crash scene Nearby                                 24 #>  6 cf2     Motor Vehicle struck by falling cargo,or something that came l…    15 #>  7 cf3     Reported as Unknown                                                 7 #>  8 cf3     Backup Due to Prior Crash                                           1 #>  9 cf3     Indication of a Stalled/Disabled Vehicle                            1 #> 10 crashrf Motor Vehicle struck by falling cargo,or something that came l…  1290 #> # ℹ 34 more rows  myGESCRSS$multi_veh %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 62 × 3 #> # Groups:   name [21] #>    name   value                                                                n #>    <chr>  <chr>                                                            <int> #>  1 damage 12 Clock Value                                                   98421 #>  2 damage 6 Clock Value                                                    42402 #>  3 damage 11 Clock Value                                                   39565 #>  4 dr_sf1 Careless Driving                                                  7341 #>  5 dr_sf1 Looked But Did Not See                                            1313 #>  6 dr_sf1 Reported as Unknown                                               1072 #>  7 dr_sf2 Operating the Vehicle in an Erratic, Reckless or Negligent Mann…  1966 #>  8 dr_sf2 Reported as Unknown                                               1072 #>  9 dr_sf2 Careless Driving                                                   226 #> 10 dr_sf3 Reported as Unknown                                               1072 #> # ℹ 52 more rows  myGESCRSS$multi_per %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 29 × 3 #> # Groups:   name [10] #>    name     value                                                              n #>    <chr>    <chr>                                                          <int> #>  1 mnmdstrd Not Distracted                                                  1650 #>  2 mnmdstrd Inattention (Inattentive), Details Unknown                       124 #>  3 mnmdstrd Reported as Unknown if Distracted                                 73 #>  4 mpr_act  Crossing Roadway                                                3421 #>  5 mpr_act  Movement Along Roadway with Traffic (In or Adjacent to Travel…   565 #>  6 mpr_act  In Roadway - Other (Working, Playing, Etc.)                      229 #>  7 mtm_crsh None Noted                                                      2621 #>  8 mtm_crsh Failure to Yield Right-Of-Way                                   1145 #>  9 mtm_crsh Improper Crossing of Roadway or Intersection (Jaywalking)        383 #> 10 nmaction Crossing Roadway                                                6886 #> # ℹ 19 more rows head(myGESCRSS$events, 10) #>         casenum veh_no               aoi                        soe veventnum #> 1  201901174219      1 Non-Harmful Event     Ran Off Roadway - Left         1 #> 2  201901174219      1     3 Clock Point                       Curb         2 #> 3  201901174219      1     Non-Collision          Rollover/Overturn         3 #> 4  201901176655      1             Right Motor Vehicle In-Transport         1 #> 5  201901176655      2    12 Clock Point Motor Vehicle In-Transport         1 #> 6  201901176667      1    12 Clock Point Motor Vehicle In-Transport         1 #> 7  201901176667      2     4 Clock Point Motor Vehicle In-Transport         1 #> 8  201901176694      1 Non-Harmful Event              End Departure         1 #> 9  201901176694      1    12 Clock Point       Traffic Sign Support         2 #> 10 201901176694      1    12 Clock Point       Tree (Standing Only)         3 #>    year #> 1  2019 #> 2  2019 #> 3  2019 #> 4  2019 #> 5  2019 #> 6  2019 #> 7  2019 #> 8  2019 #> 9  2019 #> 10 2019 # View(myGESCRSS$codebook)  myGESCRSS$codebook %>%   filter(name_rfars == \"lgt_cond\") %>% distinct() %>% head(10) #>     source year     file name_ncsa name_rfars           label value #> 1  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     1 #> 2  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     2 #> 3  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     3 #> 4  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     4 #> 5  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     5 #> 6  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     6 #> 7  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     7 #> 8  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     8 #> 9  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     9 #> 10 GESCRSS 2020 accident  LGT_COND   lgt_cond Light Condition     1 #>                value_label #> 1                 Daylight #> 2       Dark - Not Lighted #> 3           Dark - Lighted #> 4                     Dawn #> 5                     Dusk #> 6  Dark - Unknown Lighting #> 7                    Other #> 8             Not Reported #> 9      Reported as Unknown #> 10                Daylight"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"counts-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Counts","title":"Download and Analyze Crash Data","text":"first step many transportation safety analyses involves counting number relevant crashes, fatalities, people involved. counts() lets users specify count, count (rural/urban /specified states regions), include, years aggregation interval (annually monthly), factors involved crash. returns simple tibble can easily piped ggplot() quickly visualize counts.","code":"my_counts <- counts(   myGESCRSS,   what = \"crashes\",   interval = c(\"year\")   )   head(my_counts) #> # A tibble: 3 × 8 #> # Groups:   year [3] #>    year date              n what    states region urb   who   #>   <dbl> <date>        <dbl> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2019 2019-01-01 6755841. crashes all    all    all   all   #> 2  2020 2020-01-01 5250837. crashes all    all    all   all   #> 3  2021 2021-01-01 6102936. crashes all    all    all   all  my_counts %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Total Estimated Crashes\") counts(   myGESCRSS,   where = list(region=\"s\"),   what = \"injuries\",   interval = c(\"year\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Injuries in the South\") compare_counts(   df = myGESCRSS,   what = \"injuries\",   where = list(region=\"s\"),   where2 = list(region=\"ne\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     facet_wrap(.~region) +     labs(x=NULL, y=NULL, title = \"Injuries in the South and Northeast\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"mapping-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Mapping","title":"Download and Analyze Crash Data","text":"GES/CRSS friendly mapping. provide lat/lon coordinates States. Regions composed several States require extra steps generate mappable data.","code":""},{"path":"https://s87jackson.github.io/rfars/index.html","id":"modeling-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Modeling","title":"Download and Analyze Crash Data","text":"access full dataset also allows us develop statistical models. fit simple model injury severity function age restraint use. results indicate injury severity increases age, seat belts used properly.","code":"# table(myFARS$flat$inj_sev) # table(myFARS$flat$rest_use, useNA = \"ifany\") # table(myFARS$flat$per_typ, useNA = \"ifany\")  model_data <-   myGESCRSS$flat %>%   filter(rest_use %in% c(\"Lap Belt Only Used\",                          \"Shoulder Belt Only Used\",                          \"None Used / Not Applicable\",                          \"None Used/Not Applicable\",                          \"Shoulder and Lap Belt Used\"),          per_typ %in% c(\"Driver of a Motor Vehicle In-Transport\",                         \"Passenger of a Motor Vehicle In-Transport\")          ) %>%   mutate(     rest_use = case_when(       rest_use %in% c(\"Lap Belt Only Used\", \"Shoulder Belt Only Used\") ~ \"Partial\",       rest_use %in% c(\"None Used / Not Applicable\", \"None Used/Not Applicable\") ~ \"None\",       rest_use %in% c(\"Shoulder and Lap Belt Used\") ~ \"Full\",       TRUE ~ \"Unknown\"       ) %>%       as.factor() %>%       relevel(ref = \"Full\"),     kabco = case_when(       inj_sev == \"Fatal Injury (K)\" ~ 4,       inj_sev %in% c(\"Suspected Serious Injury (A)\",                       \"Suspected Serious Injury(A)\") ~ 3,       inj_sev %in% c(\"Suspected Minor Injury (B)\",                       \"Suspected Minor Injury(B)\") ~ 2,       inj_sev == \"Possible Injury (C)\" ~ 1,       inj_sev == \"No Apparent Injury (O)\" ~ 0,       TRUE ~ as.numeric(NA)       ),     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric(),     speed_n = gsub(\"\\\\D+\",\"\", trav_sp) %>% as.numeric()     )   my_model <- lm(kabco ~ age_n + rest_use + speed_n, data = model_data)   stargazer::stargazer(my_model, type = \"html\") new_data <- expand.grid(   age_n = c(20, 60),   speed_n = seq(10, 60, 10),   rest_use = factor(c(\"Full\", \"Partial\", \"None\"), levels = c(\"Full\", \"Partial\", \"None\"), ordered = TRUE) )  new_data %>%   mutate(pred = predict(my_model, newdata = new_data),          age = paste0(age_n, \" yrs\")) %>%   ggplot(aes(x=speed_n, y=pred, fill=age)) +     geom_col(position = position_dodge()) +     facet_wrap(.~rest_use) +     scale_y_continuous(       limits = c(0,4), breaks = 0:4, labels = c(\"O\", \"C\", \"B\", \"A\", \"K\"), expand = expansion()) +     theme(panel.grid = element_blank(),           panel.grid.major.y = element_line(c(\"black\")),           axis.ticks = element_blank()) +     labs(x=\"Travel Speed (mph)\", y=\"\", title = \"Predicted Injury Severity by Age, Restraint Use, and Travel Speed\",          fill=\"Age\",          caption = \"Full = correctly used seatbelt, partial = partially correctly used, none = no seatbelt.\")"},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving alcohol — alcohol","title":"(Internal) Find crashes involving alcohol — alcohol","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving alcohol — alcohol","text":"","code":"alcohol(df)"},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving alcohol — alcohol","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Append RDS files — appendRDS","title":"(Internal) Append RDS files — appendRDS","text":"(Internal) Append RDS files","code":""},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Append RDS files — appendRDS","text":"","code":"appendRDS(object, file, wd)"},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Append RDS files — appendRDS","text":"object object save append file name file saved saved wd directory check","code":""},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving bicyclists — bicyclist","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"","code":"bicyclist(df)"},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare counts — compare_counts","title":"Compare counts — compare_counts","text":"Compare counts generated counts()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare counts — compare_counts","text":"","code":"compare_counts(   df,   interval = c(\"year\", \"month\")[1],   what = c(\"crashes\", \"fatalities\", \"injuries\", \"people\")[1],   where = list(states = \"all\", region = c(\"all\", \"ne\", \"mw\", \"s\", \"w\")[1], urb = c(\"all\",     \"rural\", \"urban\")[1]),   who = c(\"all\", \"drivers\", \"passengers\", \"bicyclists\", \"pedestrians\")[1],   involved = NULL,   what2 = what,   where2 = where,   who2 = who,   involved2 = involved )"},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare counts — compare_counts","text":"df input FARS object. interval interval count: months years. count: crashes, fatalities, people involved. count, list three elements: states (\"\" default), region (\"\"), urb (\"\") type person count: (default) drivers, passengers, pedestrians, bicyclists. involved Factors involved crash. Can : distracted driver, drowsy driver, police pursuit, motorcycle, pedalcyclist, bicyclist, pedestrian, pedbike, young driver, older driver, speeding, alcohol, drugs, hit run, roadway departure, rollover, large trucks. what2 Comparison point '' (set '' unless specified). where2 Comparison point '' (set '' unless specified). who2 Comparison point '' (set '' unless specified). involved2 Comparison point 'involved' (set 'involved' unless specified).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare counts — compare_counts","text":"tibble counts.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare counts — compare_counts","text":"","code":"# \\donttest{ get_fars(years = 2020, states=\"Virginia\") %>%    compare_counts(      where = list(urb=\"rural\"),      where2 = list(urb=\"urban\")      ) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 6 × 8 #> # Groups:   year [3] #>    year date           n what    states region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2019 2019-01-01   459 crashes all    all    rural all   #> 2  2020 2020-01-01   408 crashes all    all    rural all   #> 3  2021 2021-01-01   719 crashes all    all    rural all   #> 4  2019 2019-01-01   312 crashes all    all    urban all   #> 5  2020 2020-01-01   388 crashes all    all    urban all   #> 6  2021 2021-01-01   815 crashes all    all    urban all    get_fars(years = 2020, states=\"FL\") %>%    compare_counts(      involved = \"pedestrians\",      involved2 = \"bicyclists\"      ) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 6 × 9 #> # Groups:   year [3] #>    year date           n what    states region urb   who   involved    #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> <chr>       #> 1  2019 2019-01-01   774 crashes all    all    all   all   pedestrians #> 2  2020 2020-01-01  3097 crashes all    all    all   all   pedestrians #> 3  2021 2021-01-01  1535 crashes all    all    all   all   pedestrians #> 4  2019 2019-01-01   774 crashes all    all    all   all   bicyclists  #> 5  2020 2020-01-01  3097 crashes all    all    all   all   bicyclists  #> 6  2021 2021-01-01  1535 crashes all    all    all   all   bicyclists   # }"},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate counts — counts","title":"Generate counts — counts","text":"Use FARS GES/CRSS data generate commonly requested counts.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate counts — counts","text":"","code":"counts(   df,   what = c(\"crashes\", \"fatalities\", \"injuries\", \"people\")[1],   interval = c(\"year\", \"month\")[1],   where = list(states = \"all\", region = c(\"all\", \"ne\", \"mw\", \"s\", \"w\")[1], urb = c(\"all\",     \"rural\", \"urban\")[1]),   who = c(\"all\", \"drivers\", \"passengers\", \"bicyclists\", \"pedestrians\")[1],   involved = NULL,   filterOnly = FALSE )"},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate counts — counts","text":"df input data object (must class 'FARS' 'GESCRSS' produced get_fars() get_gescrss()). count: crashes (default), fatalities, injuries, people involved. interval interval count: months years (default). count. Must list elements: states (can '', full abbreviated state names, FIPS codes), region ('', 'ne', 'mw', 's', 'w'; short northeast, midwest, south, west), urb ('', 'rural', 'urban'). un-specified elements set '' default. type person count: '' (default) 'drivers', 'passengers', 'pedestrians', 'bicyclists'. involved Factors involved crash. Can : 'distracted driver', 'drowsy driver', 'police pursuit', 'motorcycle', 'pedalcyclist', 'bicyclist', 'pedestrian', 'pedbike', 'young driver', 'older driver', 'speeding', 'alcohol', 'drugs', 'hit run', 'roadway departure', 'rollover', 'large trucks'. NULL default. filterOnly Logical, whether filter data reduce counts (FALSE default).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate counts — counts","text":"Either filtered tibble (filterOnly=TRUE) tibble counts     (filterOnly=FALSE). filterOnly=TRUE, tibble returned     'flat' tibble input FARS object, filtered according     parameters. `df` GESCRSS object, counts returned sum appropriate weights.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate counts — counts","text":"","code":"# \\donttest{  get_fars(years = 2020) %>%    counts(where = list(states=\"Virginia\", urb=\"rural\")) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 2 × 8 #> # Groups:   year [2] #>    year date           n what    states   region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>    <chr>  <chr> <chr> #> 1  2019 2019-01-01   459 crashes Virginia all    rural all   #> 2  2020 2020-01-01   408 crashes Virginia all    rural all    get_fars(years = 2020) %>%    counts(where=list(states=\"FL\"), involved = \"older driver\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 1 × 9 #> # Groups:   year [1] #>    year date           n what    states region urb   who   involved     #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> <chr>        #> 1  2020 2020-01-01   625 crashes FL     all    all   all   older driver  # }"},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving distracted drivers — distracted_driver","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"","code":"distracted_driver(df)"},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Download FARS data files — download_fars","title":"(Internal) Download FARS data files — download_fars","text":"Download files NHTSA, unzip, prepare .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Download FARS data files — download_fars","text":"","code":"download_fars(years, dest_raw, dest_prepd, states)"},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Download FARS data files — download_fars","text":"years Years downloaded, yyyy (character numeric formats) dest_raw Directory store raw CSV files dest_prepd Directory store prepared CSV files states (Optional) Inherits get_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Download FARS data files — download_fars","text":"Nothing directly current environment. Various CSV files stored either temporary directory dir specified user.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Download FARS data files — download_fars","text":"Raw files downloaded NHTSA.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Download GES/CRSS data files — download_gescrss","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Download files NHTSA, unzip, prepare .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"","code":"download_gescrss(years, dest_raw, dest_prepd, regions)"},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"years Years downloaded, yyyy (character numeric formats) dest_raw Directory store raw CSV files dest_prepd Directory store prepared CSV files regions (Optional) Inherits get_gescrss()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Nothing directly current environment. Various CSV files stored either temporary directory dir specified user.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Raw files downloaded directly NHTSA.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drivers of a given age — driver_age","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"","code":"driver_age(df, age_min, age_max)"},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"df FARS GESCRSS data object searched. age_min Lower bound driver age (inclusive). age_max Upper bound driver age (inclusive).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"","code":"drowsy_driver(df)"},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drugs — drugs","title":"(Internal) Find crashes involving drugs — drugs","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drugs — drugs","text":"","code":"drugs(df)"},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drugs — drugs","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"FARS Codebook — fars_codebook","title":"FARS Codebook — fars_codebook","text":"table describing FARS variable name, value, corresponding value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FARS Codebook — fars_codebook","text":"","code":"fars_codebook"},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FARS Codebook — fars_codebook","text":"data frame 132,454 rows 8 variables: source source data (either FARS GES/CRSS) year Year data element definition. file data file contains given variable. name_ncsa original name data element. name_rfars modified data element name used rfars label label data element (constituent values). value original value data element. value_label de-coded value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FARS Codebook — fars_codebook","text":"codebook serves useful reference researchers using FARS data.    'source' variable intended help combine gescrss_codebook.    Data elements relatively stable occasionally discontinued, created anew,    modified. 'year' variable helps indicate availability data elements,    differentiates different definitions time. Users always    check discontinuities tabulating cases. 'file' variable indicates file given data element originally appeared. , files refers    SAS files downloaded NHTSA. data elements stayed original    file. moved multi_ files. example, 'weather'    originates 'accident' file, appears multi_acc data object    created rfars. 'name_ncsa' variable describes data element's name assigned    NCSA (organization within NHTSA manages database). maximize    compatibility years ease use programming, 'name_rfars'    provides cleaned naming convention (via janitor::clean_names()).    names provided help users find corresponding entry    Analytical User’s Manual    latter used data produced get_fars(). data element 'label', human-readable version    element names. example, label 'road_fnc' 'Roadway Function Class'.    definitions may provide enough information help users    conduct analysis. Consult Analytical User’s Manual    definitions details. data element multiple 'value'-'value_label' pairs: 'value' represents    original, non-human-readable value (usually number), 'value_label'    represents corresponding text value. example, 'road_fnc', 1 ('value')    corresponds 'Rural-Principal Arterial-Interstate' ('value_label'), 2 corresponds    'Rural-Principal Arterial-', etc.","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Synonym table for various geographical scales — geo_relations","title":"Synonym table for various geographical scales — geo_relations","text":"dataset providing different ways refer states counties.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synonym table for various geographical scales — geo_relations","text":"","code":"geo_relations"},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synonym table for various geographical scales — geo_relations","text":"data frame 3,142 rows 6 variables: fips_state 2-digit FIPS code indicating state fips_county 3-digit FIPS code indicating county within state fips_tract 6-digit FIPS code indicating tract within county state_name_abbr 2-character, capitalized state abbreviation state_name_full fully spelled case-sensitive state name county_name_abbr abbreviated county name (usually minus word 'County') county_name_full fully spelled case-sensitive county name region fully spelled case-sensitive NHTSA region constituent states region_abbr abbreviated NHTSA region (ne, mw, s, w)","code":""},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Synonym table for various geographical scales — geo_relations","text":"https://www.census.gov/geographies/reference-files/2015/demo/popest/2015-fips.html","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"GESCRSS Codebook — gescrss_codebook","title":"GESCRSS Codebook — gescrss_codebook","text":"table describing GESCRSS variable name, value, corresponding value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GESCRSS Codebook — gescrss_codebook","text":"","code":"gescrss_codebook"},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GESCRSS Codebook — gescrss_codebook","text":"data frame 85,907 rows 8 variables: source source data (either FARS GESCRSS) year Year data element definition. file data file contains given variable. name_ncsa original name data element. name_rfars modified data element name used rfars label label data element (constituent values). value original value data element. value_label de-coded value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GESCRSS Codebook — gescrss_codebook","text":"codebook serves useful reference researchers using GES/CRSS data.    'source' variable intended help combine fars_codebook.    Data elements relatively stable occasionally discontinued, created anew,    modified. 'year' variable helps indicate availability data elements,    differentiates different definitions time. Users always    check discontinuities tabulating cases. 'file' variable indicates file given data element originally appeared. , files refers    SAS files downloaded NHTSA. data elements stayed original    file. moved multi_ files. example, 'weather'    originates 'accident' file, appears multi_acc data object    created rfars. 'name_ncsa' variable describes data element's name assigned    NCSA (organization within NHTSA manages database). maximize    compatibility years ease use programming, 'name_rfars'    provides cleaned naming convention (via janitor::clean_names()).    names provided help users find corresponding entry    CRSS User Manual    latter used data produced get_gescrss(). data element 'label', human-readable version    element names. example, label 'harm_ev' 'First Harmful Event'.    definitions may provide enough information help users    conduct analysis. Consult CRSS User Manual    definitions details. data element multiple 'value'-'value_label' pairs: 'value' represents    original, non-human-readable value (usually number), 'value_label'    represents corresponding text value. example, 'harm_ev', 1 ('value')    corresponds 'Rollover/Overturn' ('value_label'), 2 corresponds    'Fire/Explosion', etc.","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FARS data — get_fars","title":"Get FARS data — get_fars","text":"Bring FARS data current environment, whether downloading anew     using pre-existing files.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FARS data — get_fars","text":"","code":"get_fars(   years = 2011:2021,   states = NULL,   dir = NULL,   proceed = FALSE,   cache = NULL )"},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FARS data — get_fars","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2011-2021 (default). states States keep. Leave NULL (default) keep states. Can specified full state name (e.g. \"Virginia\"), abbreviation (\"VA\"), FIPS code (51). dir Directory search save 'FARS data' folder. NULL (default), files downloaded unzipped temporary directories prepared memory. proceed Logical, whether proceed downloading files without asking user permission (defaults FALSE, thus asking permission) cache name RDS file save use. specified file (e.g., 'myFARS.rds') exists 'dir' returned; , RDS file name saved 'dir' quick use subsequent calls.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get FARS data — get_fars","text":"FARS data object (list six tibbles: flat, multi_acc,     multi_veh, multi_per, events, codebook), described .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get FARS data — get_fars","text":"function downloads raw data NHTSA.    directory (dir) specified, SAS files downloaded    tempdir(), also prepared, combined, brought    current environment. specify directory (dir), function    look 'FARS data' folder. found, created    populated raw prepared SAS RDS files. directory found,    function makes sure requested years present asks permission    download missing years. object returned list class 'FARS'. contains six tibbles:    flat, multi_acc, multi_veh, multi_per, events, codebook. Flat files wide-formatted presented person level.    crashes involve least one motor vehicle,    may contain one multiple people. three    entities crash data. flat files therefore repeat data elements    across multiple rows. Please conduct analysis entity mind. data elements can include multiple values data level    (e.g., multiple weather conditions corresponding crash, multiple    crash factors related vehicle person). elements    collected yyyy_multi_[acc/veh/per].rds files long format.    files contain crash, vehicle, person identifiers, two    variables labelled name value. correspond    variable names raw data files corresponding values,    respectively. events tibble provides sequence events vehicles involved    crash. See Crash Sequences vignette example. Finally, codebook tibble serves searchable codebook files given year. Please review FARS Analytical User's Manual","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FARS data — get_fars","text":"","code":"# \\donttest{ myFARS <- get_fars(years = 2019:2021, states = \"51\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-64' already exists myFARS <- get_fars(years = 2021, states = \"NC\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-64' already exists # }"},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GES/CRSS data — get_gescrss","title":"Get GES/CRSS data — get_gescrss","text":"Bring GES/CRSS data current environment, whether downloading anew     using pre-existing files.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GES/CRSS data — get_gescrss","text":"","code":"get_gescrss(   years = 2011:2021,   regions = c(\"mw\", \"ne\", \"s\", \"w\"),   dir = NULL,   proceed = FALSE,   cache = NULL )"},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GES/CRSS data — get_gescrss","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2011-2021. regions (Optional) Regions keep: mw=midwest, ne=northeast, s=south, w=west. dir Directory search save 'GESCRSS data' folder. NULL (default), files downloaded unzipped temporary directories prepared memory. proceed Logical, whether proceed downloading files without asking user permission (defaults FALSE, thus asking permission) cache name RDS file save use. specified file (e.g., 'myFARS.rds') exists 'dir' returned; , RDS file name saved 'dir' quick use subsequent calls.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GES/CRSS data — get_gescrss","text":"GESCRSS data object (list six tibbles: flat, multi_acc,     multi_veh, multi_per, events, codebook).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GES/CRSS data — get_gescrss","text":"function downloads raw data GES CRSS crash databases.    directory (dir) specified, raw CSV files downloaded    tempdir(), also prepared, combined, brought    current environment. specify directory (dir), function    look 'GESCRSS data' folder. found, created    populated raw prepared SAS RDS files. directory found,    function makes sure requested years present asks permission    download missing years. object returned list class 'GESCRSS'. contains six tibbles:    flat, multi_acc, multi_veh, multi_per, events, codebook. Flat files wide-formatted presented person level.    crashes involve least one motor vehicle,    may contain one multiple people. three    entities crash data. flat files therefore repeat data elements    across multiple rows. Please conduct analysis entity mind. data elements can include multiple values data level    (e.g., multiple weather conditions corresponding crash, multiple    crash factors related vehicle person). elements    collected yyyy_multi_[acc/veh/per].rds files long format.    files contain crash, vehicle, person identifiers, two    variables labelled name value. correspond    variable names raw data files corresponding values,    respectively. events tibble provides sequence events vehicles involved    crash. See Crash Sequences vignette example. codebook tibble serves searchable codebook files given year. Please review CRSS Analytical User's Manual Regions follows:       mw = Midwest   = OH, , IL, MI, WI, MN, ND, SD, NE, IA, MO, KS       ne = Northeast = PA, NJ, NY, NH, VT, RI, MA, , CT       s  = South     = MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL, MS, LA, AR, OK, TX       w  = West      = MT, ID, WA, , CA, NV, NM, AZ, UT, CO, WY, AK, HI","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GES/CRSS data — get_gescrss","text":"","code":"# \\donttest{ myGESCRSS <- get_gescrss(years = 2019:2021, regions = \"s\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2020\\format-64' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-64' already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. myGESCRSS <- get_gescrss(years = 2021) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-64' already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. # }"},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find hit and run crashes — hit_and_run","title":"(Internal) Find hit and run crashes — hit_and_run","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find hit and run crashes — hit_and_run","text":"","code":"hit_and_run(df)"},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find hit and run crashes — hit_and_run","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Import the multi_ files — import_multi","title":"(Internal) Import the multi_ files — import_multi","text":"internal function imports multi_ files","code":""},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Import the multi_ files — import_multi","text":"","code":"import_multi(filename, where)"},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Import the multi_ files — import_multi","text":"filename filename (e.g. \"multi_acc.csv\") imported directory search within","code":""},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving large trucks — large_trucks","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"","code":"large_trucks(df)"},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Make id and year numeric — make_all_numeric","title":"(Internal) Make id and year numeric — make_all_numeric","text":"(Internal) Make id year numeric","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Make id and year numeric — make_all_numeric","text":"","code":"make_all_numeric(df)"},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Make id and year numeric — make_all_numeric","text":"df input dataframe","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Generate an ID variable — make_id","title":"(Internal) Generate an ID variable — make_id","text":"(Internal) Generate ID variable","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Generate an ID variable — make_id","text":"","code":"make_id(df)"},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Generate an ID variable — make_id","text":"df dataframe make id","code":""},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving motorcycles — motorcycle","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"","code":"motorcycle(df)"},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"","code":"pedalcyclist(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"","code":"pedbike(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedestrians — pedestrian","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"","code":"pedestrian(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving police pursuits — police_pursuit","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"","code":"police_pursuit(df)"},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare downloaded FARS files for use — prep_fars","title":"Prepare downloaded FARS files for use — prep_fars","text":"Prepare downloaded FARS files use","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare downloaded FARS files for use — prep_fars","text":"","code":"prep_fars(y, wd, rawfiles, prepared_dir, states)"},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare downloaded FARS files for use — prep_fars","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars states (Optional) Inherits get_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare downloaded FARS files for use — prep_fars","text":"Produces six files: yyyy_flat.rds, yyyy_multi_acc.rds,     yyyy_multi_veh.rds, yyyy_multi_per.rds, yyyy_events.rds, codebook.rds","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare downloaded GES/CRSS files for use — prep_gescrss","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"Prepare downloaded GES/CRSS files use","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"","code":"prep_gescrss(y, wd, rawfiles, prepared_dir, regions)"},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"y year, passed prep_gescrss wd working directory, , passed prep_gescrss rawfiles dataframe translating filenames standard terms, passed prep_gescrss prepared_dir location prepared files saved, passed prep_gescrss regions (Optional) Inherits get_gescrss()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"Produces six files: yyyy_flat.rds, yyyy_multi_acc.rds,     yyyy_multi_veh.rds, yyyy_multi_per.rds, yyyy_events.rds, codebook.rds","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Takes care of basic SAS file reading — read_basic_sas","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"(Internal) Takes care basic SAS file reading","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"","code":"read_basic_sas(x, wd, rawfiles, catfile = paste0(wd, \"formats.sas7bcat\"))"},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"x cleaned name data table (SAS7BDAT). wd working directory files rawfiles data frame connecting raw filenames cleaned ones. catfile location sas7bcat file","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"(Internal) Takes care basic SAS file reading bcat file creates issue","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"","code":"read_basic_sas_nocat(x, wd, rawfiles)"},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"x cleaned name data table (SAS7BDAT). wd working directory files rawfiles data frame connecting raw filenames cleaned ones.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) rm_cols.f — rm_cols.f","title":"(Internal) rm_cols.f — rm_cols.f","text":"internal function removes variables unnecessarily duplicated across FARS tables.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) rm_cols.f — rm_cols.f","text":"","code":"rm_cols.f(df, a, b)"},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) rm_cols.f — rm_cols.f","text":"df input data frame. original, non-imputed variable. b imputed variable (often _im suffix).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) rm_cols.g — rm_cols.g","title":"(Internal) rm_cols.g — rm_cols.g","text":"internal function removes variables unnecessarily duplicated across GES/CRSS tables.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) rm_cols.g — rm_cols.g","text":"","code":"rm_cols.g(df, a, b)"},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) rm_cols.g — rm_cols.g","text":"df input data frame. original, non-imputed variable. b imputed variable (often _im suffix).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving road departures — road_depart","title":"(Internal) Find crashes involving road departures — road_depart","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving road departures — road_depart","text":"","code":"road_depart(df)"},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving road departures — road_depart","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving rollovers — rollover","title":"(Internal) Find crashes involving rollovers — rollover","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving rollovers — rollover","text":"","code":"rollover(df)"},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving rollovers — rollover","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving speeding — speeding","title":"(Internal) Find crashes involving speeding — speeding","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving speeding — speeding","text":"","code":"speeding(df)"},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving speeding — speeding","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use FARS data files — use_fars","title":"(Internal) Use FARS data files — use_fars","text":"Compile multiple years prepared FARS data.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use FARS data files — use_fars","text":"","code":"use_fars(dir, prepared_dir, cache)"},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use FARS data files — use_fars","text":"dir Inherits get_fars(). prepared_dir Inherits get_fars(). cache Inherits get_fars().","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use FARS data files — use_fars","text":"Returns object class 'FARS' list six tibbles:     flat, multi_acc, multi_veh, multi_per, events, codebook.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use GESCRSS data files — use_gescrss","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"Compile multiple years prepared GESCRSS data.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"","code":"use_gescrss(dir, prepared_dir, cache)"},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"dir Inherits get_gescrss(). prepared_dir Inherits get_gescrss(). cache Inherits get_gescrss().","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"Returns object class 'GESCRSS' list six tibbles:     flat, multi_acc, multi_veh, multi_per, events, codebook.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) use_imp — use_imp","title":"(Internal) use_imp — use_imp","text":"internal function uses imputed variables (present many GES/CRSS tables)","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) use_imp — use_imp","text":"","code":"use_imp(df, original, imputed, show = FALSE)"},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) use_imp — use_imp","text":"df input data frame. original original, non-imputed variable. imputed imputed variable (often _im suffix). show Logical (FALSE default) Show differences original imputed values.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Validate user-provided list of states — validate_states","title":"(Internal) Validate user-provided list of states — validate_states","text":"(Internal) Validate user-provided list states","code":""},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Validate user-provided list of states — validate_states","text":"","code":"validate_states(states)"},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Validate user-provided list of states — validate_states","text":"states States specified get_fars, prep_fars, counts","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-030","dir":"Changelog","previous_headings":"","what":"rfars 0.3.0","title":"rfars 0.3.0","text":"CRAN release: 2023-05-05 Expanded FARS coverage 2011-2021 Added get_gescrss() get GES/CRSS data Modified get_ functions produce codebook.csv file Included codebook.rds file quick reference geo_relations table now includes NHTSA regions Improved counts() function Added compare_counts() function SAS files pulled NHTSA, rather CSVs Consolidated prep_fars_yyyy functions prep_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-020","dir":"Changelog","previous_headings":"","what":"rfars 0.2.0","title":"rfars 0.2.0","text":"CRAN release: 2022-11-01 Added ability download FARS data tempdir. Improved documentation. Streamlined workflow contained get_fars(). Developed hex sticker.","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-010","dir":"Changelog","previous_headings":"","what":"rfars 0.1.0","title":"rfars 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
=======
[{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Rural Roads","text":"get two years data one state, Virginia. make adjustment standard variable definitions label people driving motorcycles motorcyclists rather drivers motorcycles. makes easier refer motorcyclists later. Note myFARS object list, flat tibble containing required variables: body_typ (vehicle body type) per_typ (person type). counts() function makes easy generate specific types counts. compare_counts() lets quickly run two sets counts comparison purposes.","code":"myFARS <- get_fars(years = 2019:2021, states = \"VA\") myFARS$flat$per_typ <-    ifelse(grepl(\"motorcycle\",                 myFARS$flat$body_typ,                 ignore.case = TRUE),          \"Motorcyclist\",          myFARS$flat$per_typ)"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"basic-counts","dir":"Articles","previous_headings":"","what":"Basic Counts","title":"Rural Roads","text":"number crashes reasonable starting point. use compare_counts()function ggplot() plot annual count crashes fatalities rural urban areas, 2015 2020.","code":"compare_counts(df = myFARS, what = \"crashes\", where = list(states=\"VA\", urb=\"rural\"), where2 = list(states=\"VA\", urb = \"urban\")) %>%  ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~urb) +   labs(x=NULL, y=NULL, title = \"Crashes\", fill=NULL) compare_counts(df = myFARS, what = \"fatalities\", where = list(urb=\"rural\"), where2 = list(urb=\"urban\")) %>%    ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +    geom_col() +    geom_label(vjust=1) +   facet_wrap(.~urb) +   labs(x=NULL, y=NULL, title = \"Fatalities\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-involved-argument","dir":"Articles","previous_headings":"","what":"The involved Argument","title":"Rural Roads","text":"counts() makes easy hone specific crash types using involved argument. can : distracted driver, drowsy driver, police pursuit, motorcycle, pedalcyclist, bicyclist, pedestrian, pedbike, young driver, older driver, speeding, alcohol, drugs, hit run, roadway departure, rollover, large trucks. Specifying involved filter counts matching criterion. example involved=\"distracted driver\" return counts associated crashes involving distracted driver. Multiple values can supplied; , resulting counts satisfy criteria. , combined operator (opposed ). loop options available rfars generate simple plots.","code":"crashfactors <- c(\"distracted driver\", \"drowsy driver\",                    \"police pursuit\", \"motorcycle\", \"pedalcyclist\",                    \"bicyclist\", \"pedestrian\", \"pedbike\",                    \"young driver\", \"older driver\", \"speeding\",                    \"alcohol\", \"drugs\", \"hit and run\",                    \"roadway departure\", \"rollover\", \"large trucks\"                   )  for(crashfactor in crashfactors){      p <-      compare_counts(df = myFARS, what = \"fatalities\", where = list(urb=\"rural\"), where2 = list(urb=\"urban\"), involved = crashfactor) %>%     ggplot(aes(x=factor(year), y=n, label=scales::comma(n))) +       geom_col(position=\"dodge\") +       facet_wrap(.~urb) +       geom_label(position = position_dodge(.9), vjust=1) +       labs(title = paste0(\"Fatalities: \", crashfactor))    print(p)    }"},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-filteronly-option","dir":"Articles","previous_headings":"","what":"The filterOnly Option","title":"Rural Roads","text":"counts() function filterOnly option, returns pre-summarized data fitting specifications (, , etc.). can useful generating custom counts. example, acc_type (Crash Type) vehicle-level variable. count number crashes acc_type, need prevent -counting (one value acc_type vehicle involved crash). take value associated veh_no 1 (vehicle number 1). reasonable, may appropriate analysis situations.","code":"bind_rows(   counts(myFARS,        what = \"crashes\",        where = list(urb=\"rural\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>% #crash type is on the vehicle-level, this prevents over-counting     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Rural\"),   counts(myFARS,        what = \"crashes\",        where = list(urb=\"urban\"),        filterOnly = TRUE        ) %>%     filter(veh_no==1) %>%     select(id, year, acc_type) %>% unique() %>% group_by(acc_type, year) %>% summarize(n=n()) %>%     mutate(where = \"Urban\")     ) %>%   filter(!is.na(acc_type)) %>%   group_by(where, acc_type) %>% summarize(n=sum(n, na.rm=TRUE)) %>%   tidyr::pivot_wider(names_from = \"where\", values_from = \"n\") %>%   mutate(Total = Urban + Rural,          rural_pct = Rural/Total) %>%   arrange(desc(Total)) %>%   slice(1:20) %>%   arrange(desc(rural_pct)) %>%   mutate(acc_type = reorder(acc_type, rural_pct)) %>%      ggplot(aes(y=acc_type, x=rural_pct, fill=Rural, label=scales::percent(rural_pct, accuracy = 1))) +      geom_col() +      geom_label(hjust=1, fill=\"white\") +   scale_fill_continuous(labels=scales::comma) +     labs(x=NULL, y=NULL,           title = \"20 Most Common Crash Types by Prevalence in Rural Areas\") +     theme(plot.title.position = \"plot\") #> Adding missing grouping variables: `date` #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> Adding missing grouping variables: `date` #> `summarise()` has grouped output by 'acc_type'. You can override using the #> `.groups` argument. #> `summarise()` has grouped output by 'where'. You can override using the #> `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-flat-tibble","dir":"Articles","previous_headings":"","what":"The flat Tibble","title":"Rural Roads","text":"sometimes easiest access data directly, rather counts() function. object created get_fars() list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains 200 variables, can often provide ’s needed. several examples:","code":"myFARS$flat %>%   mutate(     vprofile = ifelse(vprofile %in% c(\"Uphill\", \"Downhill\"), \"Up/downhill\", vprofile),     valign = ifelse(grepl(\"Curve\", valign), \"Curve\", valign)     ) %>%   filter(veh_no == 1, #to avoid over-counting          rur_urb %in% c(\"Rural\", \"Urban\"),          valign %in% c(\"Straight\", \"Curve\"),          !(vprofile %in% c(\"Unknown\", \"Reported as Unknown\", \"Not Reported\"))          ) %>%   select(id, vprofile, valign, rur_urb) %>% unique() %>%   group_by(vprofile, valign, rur_urb) %>%   summarize(n = n()) %>%    ggplot(aes(x=valign, y=vprofile, fill=n, label=scales::comma(n))) +   #geom_tile() +   facet_wrap(.~rur_urb) +   viridis::scale_fill_viridis(alpha=.5) +   geom_label() +   labs(title = \"Roadway Profile and Alignment\") #> `summarise()` has grouped output by 'vprofile', 'valign'. You can override #> using the `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, per_typ) %>%   summarise(n=n()) %>%   filter(n>2) %>%   #mutate(per_typ = stringr::str_wrap(per_typ, 15)) %>%      ggplot(aes(y=per_typ, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     #geom_label(hjust=-1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Person Type and Urbanicity\")  #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\"), sex %in% c(\"Male\", \"Female\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, sex) %>%   summarise(n=n()) %>%   filter(n>90) %>%   mutate(sex = stringr::str_wrap(sex, 15)) %>%      ggplot(aes(x=sex, y=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     geom_label(vjust=1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Sex and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, hispanic) %>%   summarise(n=n()) %>%   filter(n>10) %>%   mutate(hispanic = stringr::str_wrap(hispanic, 15)) %>%      ggplot(aes(y=hispanic, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     geom_label(hjust=-1, position = position_dodge(.9)) +     labs(title = \"Fatalities by Ethnicity and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument. myFARS$flat %>%   mutate(     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric(),     hour2 = stringr::word(hour, 1, 1, sep = \":\") %>% as.numeric(),     hourm = stringr::str_sub(hour, -2, -1),     hour = ifelse(hourm==\"am\", hour2, hour2+12),     hour = ifelse(hour==24, 12, hour)     ) %>%   filter(grepl(\"(K)\", inj_sev),          rur_urb %in% c(\"Rural\", \"Urban\"),          hour < 24,          age_n <= 90) %>%   group_by(rur_urb, age_n, hour) %>% summarize(n=n()) %>%      ggplot(aes(x=hour, y=age_n, fill=n)) +     geom_tile() +     facet_wrap(.~rur_urb) +     viridis::scale_fill_viridis() +     labs(title = \"Fatalities by Age, Time of Day, and Urbanicity\") #> `summarise()` has grouped output by 'rur_urb', 'age_n'. You can override using #> the `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/articles/Rural_roads.html","id":"the-multi_per-tibble","dir":"Articles","previous_headings":"","what":"The multi_per Tibble","title":"Rural Roads","text":"flat tibble required information, may one multi_ tibbles. , access multi_per tibble visualize fatalities race.","code":"myFARS$multi_per %>%    filter(name == \"mtm_crsh\") %>%   select(state, st_case, veh_no, per_no, year, mtm_crsh=value) %>%   mutate_at(c(\"st_case\", \"veh_no\", \"per_no\", \"year\"), as.numeric) %>%   inner_join(myFARS$flat) %>%      filter(rur_urb %in% c(\"Rural\", \"Urban\")) %>%   filter(grepl(\"(K)\", inj_sev)) %>%   group_by(rur_urb, mtm_crsh) %>%   summarise(n=n()) %>%   filter(n>9) %>%   mutate(mtm_crsh = stringr::str_wrap(mtm_crsh, 25)) %>%      ggplot(aes(y=mtm_crsh, x=n, fill=rur_urb, label = scales::comma(n))) +     geom_col(position = \"dodge\") +     #geom_label(vjust=1, position = position_dodge(.9)) +     labs(title = \"Non-Motorist Contributing Circumstances\") #> Joining with `by = join_by(state, st_case, veh_no, per_no, year)` #> `summarise()` has grouped output by 'rur_urb'. You can override using the #> `.groups` argument."},{"path":"https://s87jackson.github.io/rfars/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steve Jackson. Author, maintainer.","code":""},{"path":"https://s87jackson.github.io/rfars/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jackson S (2023). rfars: Download Analyze Crash Data. R package version 0.3.0, https://github.com/s87jackson/rfars.","code":"@Manual{,   title = {rfars: Download and Analyze Crash Data},   author = {Steve Jackson},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/s87jackson/rfars}, }"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"rfars-","dir":"","previous_headings":"","what":"Download and Analyze Crash Data","title":"Download and Analyze Crash Data","text":"goal rfars facilitate transportation safety analysis simplifying process extracting data official crash databases. National Highway Traffic Safety Administration collects publishes census fatal crashes Fatality Analysis Reporting System sample fatal non-fatal crashes Crash Report Sampling System (evolution General Estimates System). Fatality Injury Reporting System Tool allows users query databases, can produce simple tables graphs. suffices simple analysis, often leaves researchers wanting . Digging deeper, however, involves time-consuming process downloading annual ZIP files attempting stitch together - first combing immense data dictionaries determine required variables table names. rfars allows users download FARS GES/CRSS data back 2011 just one line code. result full, rich dataset ready mapping, modeling, downstream analysis. Helper functions also provided produce common counts comparisons.","code":""},{"path":"https://s87jackson.github.io/rfars/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Analyze Crash Data","text":"can install latest version rfars GitHub : CRAN stable release : load rfars helpful packages:","code":"# install.packages(\"devtools\") devtools::install_github(\"s87jackson/rfars\") install.packages(\"rfars\") library(rfars) library(dplyr) library(ggplot2) library(leaflet) library(leaflet.extras)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"getting-and-using-fars-data","dir":"","previous_headings":"","what":"Getting and Using FARS Data","title":"Download and Analyze Crash Data","text":"Use get_fars() function bring FARS data current environment optionally save RDS file future use (faster downloading anew). done () downloading data temporary directory, (b) downloading permanent directory, (c) importing permanent directory. data downloaded permanent directory, function look rather downloading data . year data requested found, R ask permission download missing data. get three years data Virginia: returns ‘FARS’ object: list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains variables just one value per crash (“accident”), vehicle, person (e.g., weather conditions, travel speed, age). row corresponds person involved crash. may multiple people /vehicles involved one crash, variable-values repeated within crash vehicle. crash uniquely identified id, combination year st_case. Note st_case unique across years, example, st_case 510001 appear year. id variable attempts avoid issue. Please review FARS Analytical User’s Manual information. multi_ tibbles contain variables may varying number values entity (e.g., driver impairments, vehicle events, weather conditions time crash). tibble requisite data elements corresponding entity: multi_acc includes st_case year, multi_veh adds veh_no (vehicle number), multi_per adds per_no (person number). top name-value pairs tibble shown . events tibble provides sequence numbered events vehicle crash. codebook tibble provides searchable codebook data, useful know concept ’re looking variable describes .","code":"myFARS <- get_fars(years = 2019:2021, states = \"VA\") glimpse(myFARS$flat) #> Rows: 5,465 #> Columns: 199 #> $ year          <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 20… #> $ state         <chr> \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Virgini… #> $ st_case       <dbl> 510001, 510001, 510002, 510002, 510003, 510003, 510004, … #> $ id            <dbl> 2019510001, 2019510001, 2019510002, 2019510002, 20195100… #> $ veh_no        <dbl> 0, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1,… #> $ per_no        <dbl> 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,… #> $ county        <dbl> 760, 760, 137, 137, 53, 53, 107, 107, 175, 175, 175, 157… #> $ city          <dbl> 2060, 2060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19… #> $ lon           <dbl> -77.48444, -77.48444, -77.94240, -77.94240, -77.66604, -… #> $ lat           <dbl> 37.50924, 37.50924, 38.19840, 38.19840, 37.00784, 37.007… #> $ acc_type      <chr> NA, \"C13-Single Driver-Forward Impact-Pedestrian/ Animal… #> $ age           <chr> \"17 Years\", \"42 Years\", \"83 Years\", \"44 Years\", \"50 Year… #> $ air_bag       <chr> \"Not a Motor Vehicle Occupant\", \"Reported as Deployment … #> $ alc_det       <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Rep… #> $ alc_res       <chr> \"0.000 % BAC\", \"Test Not Given\", \"0.000 % BAC\", \"Test No… #> $ alc_status    <chr> \"Test Given\", \"Test Not Given\", \"Test Given\", \"Test Not … #> $ arr_hour      <chr> \"Unknown EMS Scene Arrival Hour\", \"Unknown EMS Scene Arr… #> $ arr_min       <chr> \"Unknown EMS Scene Arrival Minutes\", \"Unknown EMS Scene … #> $ atst_typ      <chr> \"Blood\", \"Test Not Given\", \"Blood\", \"Test Not Given\", \"T… #> $ bikecgp       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikectype     <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikedir       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikeloc       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ bikepos       <chr> \"Not a Cyclist\", NA, NA, NA, NA, NA, \"Not a Cyclist\", NA… #> $ body_typ      <chr> NA, \"4-door sedan, hardtop\", \"2-door sedan,hardtop,coupe… #> $ bus_use       <chr> NA, \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", … #> $ cargo_bt      <chr> NA, \"Not Applicable (N/A)\", \"Not Applicable (N/A)\", \"Not… #> $ cdl_stat      <chr> NA, \"No (CDL)\", \"No (CDL)\", \"No (CDL)\", \"No (CDL)\", \"No … #> $ cityname      <chr> \"RICHMOND\", \"RICHMOND\", \"NOT APPLICABLE\", \"NOT APPLICABL… #> $ countyname    <chr> \"RICHMOND (760)\", \"RICHMOND (760)\", \"ORANGE (137)\", \"ORA… #> $ day           <dbl> 1, 1, 2, 2, 3, 3, 4, 4, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 6,… #> $ day_week      <chr> \"Tuesday\", \"Tuesday\", \"Wednesday\", \"Wednesday\", \"Thursda… #> $ death_da      <chr> \"1\", \"Not Applicable (Non-Fatal)\", \"2\", \"Not Applicable … #> $ death_hr      <chr> \"6:00-6:59\", \"Not Applicable (Non-fatal)\", \"15:00-15:59\"… #> $ death_mn      <chr> \"32\", \"Not Applicable (Non-fatal)\", \"35\", \"Not Applicabl… #> $ death_mo      <chr> \"January\", \"Not Applicable (Non-Fatal)\", \"January\", \"Not… #> $ death_tm      <chr> NA, \"Not Applicable (Non-fatal)\", NA, \"Not Applicable (N… #> $ death_yr      <chr> \"2019\", \"Not Applicable (Non-fatal)\", \"2019\", \"Not Appli… #> $ deaths        <dbl> NA, 0, 1, 0, 1, 1, NA, 0, 1, 1, 0, NA, 0, 1, 1, 0, NA, 0… #> $ deformed      <chr> NA, \"Reported as Unknown\", \"Disabling Damage\", \"Disablin… #> $ doa           <chr> \"Not Applicable\", \"Not Applicable\", \"Died at Scene\", \"No… #> $ dr_drink      <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"Yes\", \"No\", \"No\",… #> $ dr_hgt        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ dr_pres       <chr> NA, \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", NA, \"Yes\", \"Yes\",… #> $ dr_wgt        <chr> NA, \"160 lbs.\", \"220 lbs.\", \"220 lbs.\", \"170 lbs.\", \"170… #> $ dr_zip        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ drinking      <chr> \"Not Reported\", \"Reported as Unknown\", \"No (Alcohol Not … #> $ drug_det      <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Rep… #> $ drugs         <chr> \"Reported as Unknown\", \"Reported as Unknown\", \"No (drugs… #> $ drunk_dr      <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ dstatus       <chr> \"Test Given\", \"Test Not Given\", \"Test Given\", \"Test Not … #> $ ej_path       <chr> \"Ejection Path Not Applicable\", \"Ejection Path Not Appli… #> $ ejection      <chr> \"Not Applicable\", \"Not Ejected\", \"Not Ejected\", \"Not Eje… #> $ emer_use      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ extricat      <chr> \"Not Extricated or Not Applicable\", \"Not Extricated or N… #> $ fatals        <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ fire_exp      <chr> NA, \"No or Not Reported\", \"No or Not Reported\", \"No or N… #> $ first_mo      <chr> NA, \"October\", \"No Record\", \"No Record\", \"No Record\", \"N… #> $ first_yr      <chr> NA, \"2016\", \"No Record\", \"No Record\", \"No Record\", \"No R… #> $ func_sys      <chr> \"Principal Arterial - Other\", \"Principal Arterial - Othe… #> $ gvwr          <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ harm_ev       <chr> \"Pedestrian\", \"Pedestrian\", \"Motor Vehicle In-Transport\"… #> $ haz_cno       <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_id        <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_inv       <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\", … #> $ haz_plac      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ haz_rel       <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ helm_mis      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ helm_use      <chr> \"Not a Motor Vehicle Occupant\", \"Not Applicable\", \"Not A… #> $ hispanic      <chr> \"Non-Hispanic\", \"Not A Fatality (not Applicable)\", \"Non-… #> $ hit_run       <chr> NA, \"Yes\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\",… #> $ hosp_hr       <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ hosp_mn       <chr> \"Unknown EMS Hospital Arrival Time\", \"Unknown EMS Hospit… #> $ hospital      <chr> \"EMS Unknown Mode\", \"Not Transported\", \"Not Transported\"… #> $ hour          <chr> \"5:00am-5:59am\", \"5:00am-5:59am\", \"3:00pm-3:59pm\", \"3:00… #> $ impact1       <chr> NA, \"12 Clock Point\", \"12 Clock Point\", \"12 Clock Point\"… #> $ inj_sev       <chr> \"Fatal Injury (K)\", \"No Apparent Injury (O)\", \"Fatal Inj… #> $ j_knife       <chr> NA, \"Not an Articulated Vehicle\", \"Not an Articulated Ve… #> $ l_compl       <chr> NA, \"Valid license for this class vehicle\", \"Valid licen… #> $ l_endors      <chr> NA, \"No Endorsements required for this vehicle\", \"No End… #> $ l_restri      <chr> NA, \"Restrictions, Compliance Unknown\", \"No Restrictions… #> $ l_state       <chr> NA, \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Vir… #> $ l_status      <chr> NA, \"Valid\", \"Valid\", \"Valid\", \"Valid\", \"Valid\", NA, \"Va… #> $ l_type        <chr> NA, \"Full Driver License\", \"Full Driver License\", \"Full … #> $ lag_hrs       <chr> NA, \"Unknown\", NA, \"Unknown\", \"Unknown\", NA, NA, \"Unknow… #> $ lag_mins      <chr> NA, \"Unknown\", NA, \"Unknown\", \"Unknown\", NA, NA, \"Unknow… #> $ last_mo       <chr> NA, \"March\", \"No Record\", \"No Record\", \"No Record\", \"No … #> $ last_yr       <chr> NA, \"2018\", \"No Record\", \"No Record\", \"No Record\", \"No R… #> $ lgt_cond      <chr> \"Dark - Lighted\", \"Dark - Lighted\", \"Daylight\", \"Dayligh… #> $ location      <chr> \"Not at Intersection - On Roadway, Not in Marked Crosswa… #> $ m_harm        <chr> NA, \"Pedestrian\", \"Motor Vehicle In-Transport\", \"Motor V… #> $ mak_mod       <chr> NA, \"Chevrolet Malibu/Malibu Maxx\", \"Pontiac Grand AM\", … #> $ make          <chr> NA, \"Chevrolet\", \"Pontiac\", \"Toyota\", \"Chevrolet\", \"Chev… #> $ man_coll      <chr> \"The First Harmful Event was Not a Collision with a Moto… #> $ mcarr_i1      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ mcarr_i2      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ mcarr_id      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ milept        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ minute        <dbl> 48, 48, 35, 35, 5, 5, 30, 30, 47, 47, 47, 5, 5, 36, 36, … #> $ mod_year      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ model         <dbl> NA, 37, 18, 46, 473, 473, NA, 402, 471, 471, 482, NA, 40… #> $ month         <chr> \"January\", \"January\", \"January\", \"January\", \"January\", \"… #> $ motdir        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ motman        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ nhs           <chr> \"This section IS ON the NHS\", \"This section IS ON the NH… #> $ nmhelmet      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmlight       <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmothpre      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmothpro      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmpropad      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ nmrefclo      <chr> \"Not Reported\", NA, NA, NA, NA, NA, \"Not Reported\", NA, … #> $ not_hour      <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ not_min       <chr> \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"Unknown\", \"… #> $ numoccs       <chr> NA, \"Unknown\", \"01\", \"01\", \"02\", \"02\", NA, \"01\", \"02\", \"… #> $ owner         <chr> NA, \"Driver (in this crash) was  Registered Owner\", \"Dri… #> $ p_crash1      <chr> NA, \"Going Straight\", \"Going Straight\", \"Going Straight\"… #> $ p_crash2      <chr> NA, \"Pedestrian in road\", \"Over the lane line on left si… #> $ p_crash3      <chr> NA, \"Unknown/Not Reported\", \"No Avoidance Maneuver\", \"No… #> $ pbcwalk       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pbswalk       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pbszone       <chr> \"None Noted\", NA, NA, NA, NA, NA, \"None Noted\", NA, NA, … #> $ pcrash4       <chr> NA, \"Tracking\", \"Tracking\", \"Tracking\", \"Skidding latera… #> $ pcrash5       <chr> NA, \"Stayed in original travel lane\", \"Stayed on roadway… #> $ pedcgp        <chr> \"Pedestrian in Roadway - Circumstances Unknown\", NA, NA,… #> $ pedctype      <chr> \"Lying in Roadway\", NA, NA, NA, NA, NA, \"Walking/Running… #> $ peddir        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ pedleg        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ pedloc        <chr> \"Not At Intersection\", NA, NA, NA, NA, NA, \"Not At Inter… #> $ pedpos        <chr> \"Travel Lane\", NA, NA, NA, NA, NA, \"Travel Lane\", NA, NA… #> $ peds          <dbl> 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,… #> $ pedsnr        <chr> \"Not Applicable\", NA, NA, NA, NA, NA, \"Not Applicable\", … #> $ per_typ       <chr> \"Pedestrian\", \"Driver of a Motor Vehicle In-Transport\", … #> $ permvit       <dbl> 1, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 1,… #> $ pernotmvit    <dbl> 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,… #> $ persons       <dbl> 1, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 1,… #> $ prev_acc      <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ prev_dwi      <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_oth      <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_spd      <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ prev_sus1     <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_sus2     <chr> NA, \"None\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", … #> $ prev_sus3     <chr> NA, \"1\", \"None\", \"None\", \"None\", \"None\", NA, \"None\", \"No… #> $ pvh_invl      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ rail          <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"N… #> $ rd_owner      <chr> \"City or Municipal Highway Agency\", \"City or Municipal H… #> $ reg_stat      <chr> NA, \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Vir… #> $ rel_road      <chr> \"On Roadway\", \"On Roadway\", \"On Roadway\", \"On Roadway\", … #> $ reljct1       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N… #> $ reljct2       <chr> \"Non-Junction\", \"Non-Junction\", \"Non-Junction\", \"Non-Jun… #> $ rest_mis      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ rest_use      <chr> \"Not a Motor Vehicle Occupant\", \"None Used/Not Applicabl… #> $ rolinloc      <chr> NA, \"No Rollover\", \"No Rollover\", \"No Rollover\", \"On Med… #> $ rollover      <chr> NA, \"No Rollover\", \"No Rollover\", \"No Rollover\", \"Rollov… #> $ route         <chr> \"U.S. Highway\", \"U.S. Highway\", \"U.S. Highway\", \"U.S. Hi… #> $ rur_urb       <chr> \"Urban\", \"Urban\", \"Rural\", \"Rural\", \"Rural\", \"Rural\", \"R… #> $ sch_bus       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N… #> $ seat_pos      <chr> \"Not a Motor Vehicle Occupant\", \"Front Seat, Left Side\",… #> $ sex           <chr> \"Female\", \"Female\", \"Male\", \"Male\", \"Male\", \"Male\", \"Fem… #> $ sp_jur        <chr> \"No Special Jurisdiction\", \"No Special Jurisdiction\", \"N… #> $ spec_use      <chr> NA, \"No Special Use\", \"No Special Use\", \"No Special Use\"… #> $ speedrel      <chr> NA, \"No\", \"No\", \"No\", \"No\", \"No\", NA, \"No\", \"No\", \"No\", … #> $ statename     <chr> \"Virginia\", \"Virginia\", \"Virginia\", \"Virginia\", \"Virgini… #> $ str_veh       <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,… #> $ tow_veh       <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ towed         <chr> NA, \"Not Towed\", \"Towed Due to Disabling Damage\", \"Towed… #> $ trav_sp       <chr> NA, \"Not Reported\", \"055 MPH\", \"055 MPH\", \"073 MPH\", \"07… #> $ trlr1vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ trlr2vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ trlr3vin      <chr> NA, \"No Trailing Units\", \"No Trailing Units\", \"No Traili… #> $ tway_id       <chr> \"US-60\", \"US-60\", \"US-522\", \"US-522\", \"I-85\", \"I-85\", \"C… #> $ tway_id2      <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"TUCKER SWAMP RD\", \"TUCK… #> $ typ_int       <chr> \"Not an Intersection\", \"Not an Intersection\", \"Not an In… #> $ underide      <chr> NA, \"No Underride or Override Noted\", \"No Underride or O… #> $ unittype      <chr> NA, \"Motor Vehicle In-Transport (Inside or Outside the T… #> $ v_config      <chr> NA, \"Not Applicable\", \"Not Applicable\", \"Not Applicable\"… #> $ valign        <chr> NA, \"Straight\", \"Straight\", \"Straight\", \"Straight\", \"Str… #> $ ve_forms      <dbl> 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1,… #> $ ve_total      <dbl> 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1,… #> $ vin           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vnum_lan      <chr> NA, \"Two lanes\", \"Two lanes\", \"Two lanes\", \"Two lanes\", … #> $ vpavetyp      <chr> NA, \"Blacktop, Bituminous, or Asphalt\", \"Blacktop, Bitum… #> $ vprofile      <chr> NA, \"Level\", \"Grade, Unknown Slope\", \"Grade, Unknown Slo… #> $ vspd_lim      <chr> NA, \"35 MPH\", \"55 MPH\", \"55 MPH\", \"70 MPH\", \"70 MPH\", NA… #> $ vsurcond      <chr> NA, \"Dry\", \"Dry\", \"Dry\", \"Wet\", \"Wet\", NA, \"Dry\", \"Dry\",… #> $ vtcont_f      <chr> NA, \"No Controls\", \"No Controls\", \"No Controls\", \"No Con… #> $ vtrafcon      <chr> NA, \"No Controls\", \"No Controls\", \"No Controls\", \"No Con… #> $ vtrafway      <chr> NA, \"Two-Way,  Divided, Positive  Median Barrier\", \"Two-… #> $ work_inj      <chr> \"No\", \"Not Applicable (not a fatality)\", \"No\", \"Not Appl… #> $ wrk_zone      <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", … #> $ gvwr_from     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ gvwr_to       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ icfinalbody   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr1gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr2gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ trlr3gvwr     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicbodyclass <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicmake      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ vpicmodel     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ underoverride <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … bind_rows(      myFARS$multi_acc %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_acc\"),   myFARS$multi_veh %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_veh\"),   myFARS$multi_per %>% filter(!is.na(value)) %>% group_by(name, value) %>% summarize(n=n(), .groups = \"drop\") %>% arrange(desc(n)) %>% slice(1:10) %>% mutate(table = \"multi_per\"),    ) %>%      select(table, name, value, n) #> # A tibble: 30 × 4 #>    table     name     value                                                    n #>    <chr>     <chr>    <chr>                                                <int> #>  1 multi_acc weather  Rain                                                   182 #>  2 multi_acc weather1 Rain                                                    78 #>  3 multi_acc crashrf  Police Pursuit Involved                                 39 #>  4 multi_acc crashrf  Motor Vehicle struck by falling cargo,or something …    38 #>  5 multi_acc weather  Fog, Smog, Smoke                                        18 #>  6 multi_acc cf1      Police Pursuit Involved                                 17 #>  7 multi_acc crashrf  Indication of a Stalled/Disabled Vehicle                15 #>  8 multi_acc crashrf  Recent/Previous Crash scene Nearby                      15 #>  9 multi_acc weather  Clear                                                   13 #> 10 multi_acc weather1 Fog, Smog, Smoke                                        10 #> # ℹ 20 more rows head(myFARS$events, 10) #>       state st_case veh_no               aoi                        soe #> 1  Virginia  510001      1    12 Clock Point                 Pedestrian #> 2  Virginia  510002      1 Non-Harmful Event           Cross Centerline #> 3  Virginia  510002      1    12 Clock Point Motor Vehicle In-Transport #> 4  Virginia  510002      2    12 Clock Point Motor Vehicle In-Transport #> 5  Virginia  510003      1 Non-Harmful Event     Ran Off Roadway - Left #> 6  Virginia  510003      1 Non-Harmful Event        Re-entering Roadway #> 7  Virginia  510003      1 Non-Harmful Event     Ran Off Roadway - Left #> 8  Virginia  510003      1    12 Clock Point                 Embankment #> 9  Virginia  510003      1     Non-Collision          Rollover/Overturn #> 10 Virginia  510004      1    12 Clock Point                 Pedestrian #>    veventnum year #> 1          1 2019 #> 2          1 2019 #> 3          2 2019 #> 4          1 2019 #> 5          1 2019 #> 6          2 2019 #> 7          3 2019 #> 8          4 2019 #> 9          5 2019 #> 10         1 2019 # View(myFARS$codebook)  myFARS$codebook %>%   filter(name_rfars == \"lgt_cond\") %>% distinct() %>% head(10) #>    source year     file name_ncsa name_rfars           label value #> 1    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     1 #> 2    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     2 #> 3    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     3 #> 4    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     4 #> 5    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     5 #> 6    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     6 #> 7    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     7 #> 8    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     8 #> 9    FARS 2019 accident  LGT_COND   lgt_cond Light Condition     9 #> 10   FARS 2020 accident  LGT_COND   lgt_cond Light Condition     1 #>                value_label #> 1                 Daylight #> 2       Dark - Not Lighted #> 3           Dark - Lighted #> 4                     Dawn #> 5                     Dusk #> 6  Dark - Unknown Lighting #> 7                    Other #> 8             Not Reported #> 9      Reported as Unknown #> 10                Daylight"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"counts","dir":"","previous_headings":"Getting and Using FARS Data","what":"Counts","title":"Download and Analyze Crash Data","text":"first step many transportation safety analyses involves counting number relevant crashes, fatalities, people involved. counts() lets users specify count, count (rural/urban /specified states regions), include, interval count (annually monthly), factors involved crashes. returns simple tibble can easily piped ggplot() quickly visualize counts.     can combine two counts() results make comparison. compare number speeding-related fatalities rural urban Virginia:","code":"my_counts <- counts(   myFARS,   what = \"crashes\",   interval = c(\"year\")   )   head(my_counts) #> # A tibble: 3 × 8 #> # Groups:   year [3] #>    year date           n what    states region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2019 2019-01-01   774 crashes all    all    all   all   #> 2  2020 2020-01-01   796 crashes all    all    all   all   #> 3  2021 2021-01-01   906 crashes all    all    all   all  my_counts %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Fatal Crashes in Virginia\") counts(   myFARS,   what = \"fatalities\",   interval = c(\"year\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Fatalities in Virginia\") counts(myFARS,        what = \"fatalities\",        where = list(urb=\"rural\"),        interval = c(\"year\")        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Rural Fatalities in Virginia\") counts(myFARS,        what = \"fatalities\",        where = list(urb=\"rural\"),        interval = c(\"year\"),        involved = \"speeding\"        ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Speeding-Related Fatalities in Rural Virginia\") compare_counts(   df = myFARS,   involved = \"speeding\",   what = \"fatalities\",   where = list(urb=\"rural\"),   where2 = list(urb=\"urban\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     facet_wrap(.~urb) +     labs(x=NULL, y=NULL, title = \"Speeding-Related Fatalities in Virginia\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"mapping","dir":"","previous_headings":"Getting and Using FARS Data","what":"Mapping","title":"Download and Analyze Crash Data","text":"can take advantage access full data maps. map pedestrian bicyclist fatalities Virginia:  Drug-related crashes:  Young drivers:","code":"counts(   myFARS,    what = \"crashes\",    involved = \"pedbike\",    filterOnly = TRUE   ) %>%  leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively counts(   myFARS,    what = \"crashes\",    involved = \"drugs\",    filterOnly = TRUE   ) %>%   filter(!is.na(lat), !is.na(lon)) %>%   filter(lat < 90, lon < 900) %>% leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively counts(   myFARS,    what = \"crashes\",    involved = \"young driver\",    filterOnly = TRUE   ) %>%   filter(!is.na(lat), !is.na(lon)) %>%   filter(lat < 90, lon < 900) %>% leaflet() %>%   addTiles() %>%   addHeatmap(group = \"Heatmap\", radius=10, blur=20, minOpacity = .01, max = .2, cellSize = 1) %>%   addCircleMarkers(     radius = 1,     color = \"red\",     stroke = FALSE,     fillOpacity = 0.7, group = \"Crash Locations\")  #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"modeling","dir":"","previous_headings":"Getting and Using FARS Data","what":"Modeling","title":"Download and Analyze Crash Data","text":"access full dataset also allows us develop statistical models. fit simple model injury severity function age restraint use. results indicate injury severity increases age, seat belts used properly.","code":"# table(myFARS$flat$inj_sev) # table(myFARS$flat$rest_use, useNA = \"ifany\") # table(myFARS$flat$per_typ, useNA = \"ifany\")  model_data <-   myFARS$flat %>%   filter(rest_use %in% c(\"Lap Belt Only Used\",                          \"Shoulder Belt Only Used\",                          \"None Used / Not Applicable\",                          \"None Used/Not Applicable\",                          \"Shoulder and Lap Belt Used\"),          per_typ %in% c(\"Driver of a Motor Vehicle In-Transport\",                         \"Passenger of a Motor Vehicle In-Transport\")          ) %>%   mutate(     rest_use = case_when(       rest_use %in% c(\"Lap Belt Only Used\", \"Shoulder Belt Only Used\") ~ \"Partial\",       rest_use %in% c(\"None Used / Not Applicable\", \"None Used/Not Applicable\") ~ \"None\",       rest_use %in% c(\"Shoulder and Lap Belt Used\") ~ \"Full\",       TRUE ~ \"Unknown\"       ) %>%       as.factor() %>%       relevel(ref = \"Full\"),     kabco = case_when(       inj_sev == \"Fatal Injury (K)\" ~ 4,       inj_sev %in% c(\"Suspected Serious Injury (A)\",                       \"Suspected Serious Injury(A)\") ~ 3,       inj_sev %in% c(\"Suspected Minor Injury (B)\",                       \"Suspected Minor Injury(B)\") ~ 2,       inj_sev == \"Possible Injury (C)\" ~ 1,       inj_sev == \"No Apparent Injury (O)\" ~ 0,       TRUE ~ as.numeric(NA)       ),     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric())   my_model <- lm(kabco ~ age_n + rest_use, data = model_data)   stargazer::stargazer(my_model, type = \"html\") new_data <- expand.grid(   age_n = c(20, 60),   rest_use = factor(c(\"Full\", \"Partial\", \"None\"), levels = c(\"Full\", \"Partial\", \"None\"), ordered = TRUE) )  new_data %>%   mutate(pred = predict(my_model, newdata = new_data),          age = paste0(age_n, \" yrs\")) %>%   ggplot(aes(x=rest_use, y=pred)) +     geom_col() +     facet_wrap(.~age) +     scale_y_continuous(       limits = c(0,4), breaks = 0:4, labels = c(\"O\", \"C\", \"B\", \"A\", \"K\"), expand = expansion()) +     theme(panel.grid = element_blank(),           panel.grid.major.y = element_line(c(\"black\")),           axis.ticks = element_blank()) +     labs(x=\"\", y=\"\", title = \"Predicted Injury Severity by Age and Restraint Use\",          caption = \"Full = correctly used seatbelt, partial = partially correctly used, none = no seatbelt.\")"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"getting-and-using-gescrss-data","dir":"","previous_headings":"","what":"Getting and Using GES/CRSS Data","title":"Download and Analyze Crash Data","text":"Use get_grscrss() function bring GES/CRSS data current environment optionally save RDS file future use (faster downloading anew). done () downloading data temporary directory, (b) downloading permanent directory, (c) importing permanent directory. data downloaded permanent directory, function look rather downloading data . year data requested found, R ask permission download missing data. get three years data. specify region can confirm results official data. returns ‘GESCRSS’ object: list six tibbles: flat, multi_acc, multi_veh, multi_per, events, codebook. flat tibble contains variables just one value per crash (“accident”), vehicle, person (e.g., weather conditions, travel speed, age). row corresponds person involved crash. may multiple people /vehicles involved one crash, variable-values repeated within crash vehicle. crash uniquely identified id, combination year casenum. Please review CRSS Analytical User’s Manual information. multi_ tibbles contain variables may varying number values entity (e.g., driver impairments, vehicle events, weather conditions time crash). tibble requisite data elements corresponding entity: multi_acc includes st_case year, multi_veh adds veh_no (vehicle number), multi_per adds per_no (person number). top three name-value pairs tibble shown . events tibble provides sequence numbered events vehicle crash. codebook tibble provides searchable codebook data, useful know concept ’re looking variable describes .","code":"myGESCRSS <- get_gescrss(years = 2019:2021) #> Warning in dir.create(paste0(dest_raw_y, \"/format-32\")): #> 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpEnDbQ6\\GESCRSS data\\raw\\2020\\format-32' #> already exists #> Warning in dir.create(paste0(dest_raw_y, \"/format-64\")): #> 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpEnDbQ6\\GESCRSS data\\raw\\2020\\format-64' #> already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. glimpse(myGESCRSS$flat) #> Rows: 401,162 #> Columns: 144 #> $ year           <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2… #> $ region         <chr> \"South (MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL,… #> $ psu            <dbl> 75, 63, 63, 63, 63, 63, 63, 65, 65, 12, 12, 12, 12, 75,… #> $ psustrat       <dbl> 19, 16, 16, 16, 16, 16, 16, 13, 13, 12, 12, 12, 12, 19,… #> $ casenum        <dbl> 201901174219, 201901176655, 201901176655, 201901176655,… #> $ weight         <dbl> 203.66512, 59.07346, 59.07346, 59.07346, 59.07346, 59.0… #> $ id             <dbl> 2.019202e+15, 2.019202e+15, 2.019202e+15, 2.019202e+15,… #> $ veh_no         <dbl> 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 0, 1, 1, 1… #> $ per_no         <dbl> 1, 1, 2, 3, 4, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2… #> $ acc_type       <chr> \"B7-Single Driver-Left Roadside Departure-Control/Tract… #> $ age            <chr> \"39 Years\", \"20 Years\", \"19 Years\", \"47 Years\", \"39 Yea… #> $ air_bag        <chr> \"Not Deployed\", \"Not Deployed\", \"Not Deployed\", \"Not De… #> $ alc_res        <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ alc_status     <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ alcohol        <chr> \"No Alcohol Involved\", \"No Alcohol Involved\", \"No Alcoh… #> $ atst_typ       <chr> \"Test Not Given\", \"Test Not Given\", \"Test Not Given\", \"… #> $ bikecgp        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikectype      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikedir        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikeloc        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ bikepos        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ body_typ       <chr> \"Light Pickup\", \"4-door sedan, hardtop\", \"4-door sedan,… #> $ bus_use        <chr> \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"Not a Bus\", \"No… #> $ cargo_bt       <chr> \"Not Applicable (N/A)\", \"Not Applicable (N/A)\", \"Not Ap… #> $ day_week       <chr> \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", … #> $ deformed       <chr> \"Disabling Damage\", \"Functional Damage\", \"Functional Da… #> $ dr_pres        <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",… #> $ dr_zip         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ drinking       <chr> \"No (Alcohol Not Involved)\", \"No (Alcohol Not Involved)… #> $ drugs          <chr> \"No (drugs not involved)\", \"Not Reported\", \"Not Reporte… #> $ ejection       <chr> \"Not Ejected\", \"Not Ejected\", \"Not Ejected\", \"Not Eject… #> $ emer_use       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ fire_exp       <chr> \"No or Not Reported\", \"No or Not Reported\", \"No or Not … #> $ gvwr           <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ harm_ev        <chr> \"Curb\", \"Motor Vehicle In-Transport\", \"Motor Vehicle In… #> $ haz_cno        <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_id         <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_inv        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ haz_plac       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ haz_rel        <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ helm_mis       <chr> \"None Used/Not Applicable\", \"None Used/Not Applicable\",… #> $ helm_use       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ hit_run        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ hospital       <chr> \"Not Transported\", \"Not Transported\", \"Other\", \"Not Tra… #> $ hour           <chr> \"8:00am-8:59am\", \"2:00am-2:59am\", \"2:00am-2:59am\", \"2:0… #> $ impact1        <chr> \"3 Clock Point\", \"Right\", \"Right\", \"Right\", \"Right\", \"1… #> $ inj_sev        <chr> \"No Apparent Injury (O)\", \"No Apparent Injury (O)\", \"Po… #> $ int_hwy        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ j_knife        <chr> \"Not an Articulated Vehicle\", \"Not an Articulated Vehic… #> $ lgt_cond       <chr> \"Daylight\", \"Dark - Lighted\", \"Dark - Lighted\", \"Dark -… #> $ location       <chr> \"Occupant of a Motor Vehicle\", \"Occupant of a Motor Veh… #> $ m_harm         <chr> \"Rollover/Overturn\", \"Motor Vehicle In-Transport\", \"Mot… #> $ mak_mod        <chr> \"Ford Ranger\", \"Dodge Dart (2013 on. See model 001 for … #> $ make           <chr> \"Ford\", \"Dodge\", \"Dodge\", \"Dodge\", \"Dodge\", \"Honda\", \"H… #> $ man_coll       <chr> \"The First Harmful Event was Not a Collision with a Mot… #> $ max_sev        <chr> \"No Apparent Injury (O)\", \"Possible Injury (C)\", \"Possi… #> $ max_vsev       <chr> \"No Apparent Injury (O)\", \"Possible Injury (C)\", \"Possi… #> $ mcarr_i1       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ mcarr_i2       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ mcarr_id       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ minute         <dbl> 6, 12, 12, 12, 12, 12, 12, 33, 33, 8, 41, 41, 41, 42, 4… #> $ mod_year       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ model          <dbl> 471, 29, 29, 29, 29, 402, 402, 402, 481, 51, 422, 32, 3… #> $ month          <chr> \"January\", \"January\", \"January\", \"January\", \"January\", … #> $ motdir         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ motman         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmhelmet       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmlight        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmothpre       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmothpro       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmpropad       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ nmrefclo       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ num_inj        <chr> \"No Person Injured/Property Damage Only Crash\", NA, NA,… #> $ num_injv       <chr> \"No Person Injured in Vehicle\", NA, NA, NA, NA, NA, NA,… #> $ numoccs        <chr> \"01\", \"04\", \"04\", \"04\", \"04\", \"02\", \"02\", \"01\", \"01\", \"… #> $ p_crash1       <chr> \"Accelerating in Road\", \"Going Straight\", \"Going Straig… #> $ p_crash2       <chr> \"Traveling too fast for conditions or Road Configuratio… #> $ p_crash3       <chr> \"Unknown/Not Reported\", \"Unknown/Not Reported\", \"Unknow… #> $ pbcwalk        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbptype        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbswalk        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pbszone        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pcrash4        <chr> \"Skidding Laterally, Rotation Direction Unknown\", \"Trac… #> $ pcrash5        <chr> \"Departed roadway\", \"Stayed in original travel lane\", \"… #> $ pedcgp         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedctype       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ peddir         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedleg         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedloc         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ pedpos         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ peds           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0… #> $ pedsnr         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ per_typ        <chr> \"Driver of a Motor Vehicle In-Transport\", \"Driver of a … #> $ permvit        <dbl> 1, 6, 6, 6, 6, 6, 6, 2, 2, 1, 3, 3, 3, 2, 2, 1, 1, 3, 3… #> $ pernotmvit     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0… #> $ psu_var        <dbl> 75, 63, 63, 63, 63, 63, 63, 65, 65, 12, 12, 12, 12, 75,… #> $ pvh_invl       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ rel_road       <chr> \"On Median\", \"On Roadway\", \"On Roadway\", \"On Roadway\", … #> $ reljct1        <chr> \"Yes\", \"Not Reported\", \"Not Reported\", \"Not Reported\", … #> $ reljct2        <chr> \"Entrance/Exit Ramp Related\", \"Intersection\", \"Intersec… #> $ rest_mis       <chr> \"No Indication of Mis-Use\", \"No Indication of Mis-Use\",… #> $ rest_use       <chr> \"Shoulder and Lap Belt Used\", \"Shoulder and Lap Belt Us… #> $ rolinloc       <chr> \"On Median/Separator\", \"No Rollover\", \"No Rollover\", \"N… #> $ rollover       <chr> \"Rollover, Tripped by Object/Vehicle\", \"No Rollover\", \"… #> $ sch_bus        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"… #> $ seat_pos       <chr> \"Front Seat, Left Side\", \"Front Seat, Left Side\", \"Fron… #> $ sex            <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male… #> $ spec_use       <chr> \"No Special Use\", \"No Special Use\", \"No Special Use\", \"… #> $ speedrel       <chr> \"Yes, Too Fast for Conditions\", \"No\", \"No\", \"No\", \"No\",… #> $ str_veh        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0… #> $ tow_veh        <chr> \"No Trailing Units\", \"No Trailing Units\", \"No Trailing … #> $ towed          <chr> \"Towed Due to Disabling Damage\", \"Towed Not Due to Disa… #> $ trav_sp        <chr> \"Not Reported\", \"Not Reported\", \"Not Reported\", \"Not Re… #> $ typ_int        <chr> \"Not an Intersection\", \"Four-Way Intersection\", \"Four-W… #> $ unittype       <chr> \"Motor Vehicle In-Transport (Inside or Outside the Traf… #> $ urbanicity     <chr> \"Rural Area\", \"Rural Area\", \"Rural Area\", \"Rural Area\",… #> $ v_config       <chr> \"Not Applicable\", \"Not Applicable\", \"Not Applicable\", \"… #> $ valign         <chr> \"Curve - Right\", \"Straight\", \"Straight\", \"Straight\", \"S… #> $ ve_forms       <dbl> 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2… #> $ ve_total       <dbl> 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2… #> $ veh_alch       <chr> \"No Alcohol Involved\", \"No Alcohol Involved\", \"No Alcoh… #> $ vnum_lan       <chr> \"Not Reported\", \"Six lanes\", \"Six lanes\", \"Six lanes\", … #> $ vprofile       <chr> \"Level\", \"Grade, Unknown Slope\", \"Grade, Unknown Slope\"… #> $ vspd_lim       <chr> \"35 MPH\", \"40 MPH\", \"40 MPH\", \"40 MPH\", \"40 MPH\", \"Not … #> $ vsurcond       <chr> \"Wet\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\",… #> $ vtcont_f       <chr> \"Device Functioning Properly\", \"Device Functioning Prop… #> $ vtrafcon       <chr> \"Yield Sign\", \"Flashing Traffic Control Signal\", \"Flash… #> $ vtrafway       <chr> \"Entrance/Exit Ramp\", \"Two-Way, Not Divided\", \"Two-Way,… #> $ wrk_zone       <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\",… #> $ gvwr_from      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ gvwr_to        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ ic_final_body  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ icfinalbody    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ reljct1_im     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr1gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr2gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ trlr3gvwr      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picbodyclass <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picmake      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ v_picmodel     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicbodyclass  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicmake       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ vpicmodel      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ underoverride  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… myGESCRSS$multi_acc %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 44 × 3 #> # Groups:   name [15] #>    name    value                                                               n #>    <chr>   <chr>                                                           <int> #>  1 cf1     Motor Vehicle struck by falling cargo,or something that came l…   540 #>  2 cf1     Regular Congestion                                                433 #>  3 cf1     Non-occupant struck vehicle                                       255 #>  4 cf2     Indication of a Stalled/Disabled Vehicle                           47 #>  5 cf2     Recent/Previous Crash scene Nearby                                 24 #>  6 cf2     Motor Vehicle struck by falling cargo,or something that came l…    15 #>  7 cf3     Reported as Unknown                                                 7 #>  8 cf3     Backup Due to Prior Crash                                           1 #>  9 cf3     Indication of a Stalled/Disabled Vehicle                            1 #> 10 crashrf Motor Vehicle struck by falling cargo,or something that came l…  1290 #> # ℹ 34 more rows  myGESCRSS$multi_veh %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 62 × 3 #> # Groups:   name [21] #>    name   value                                                                n #>    <chr>  <chr>                                                            <int> #>  1 damage 12 Clock Value                                                   98421 #>  2 damage 6 Clock Value                                                    42402 #>  3 damage 11 Clock Value                                                   39565 #>  4 dr_sf1 Careless Driving                                                  7341 #>  5 dr_sf1 Looked But Did Not See                                            1313 #>  6 dr_sf1 Reported as Unknown                                               1072 #>  7 dr_sf2 Operating the Vehicle in an Erratic, Reckless or Negligent Mann…  1966 #>  8 dr_sf2 Reported as Unknown                                               1072 #>  9 dr_sf2 Careless Driving                                                   226 #> 10 dr_sf3 Reported as Unknown                                               1072 #> # ℹ 52 more rows  myGESCRSS$multi_per %>% group_by(name, value) %>% summarize(n=n()) %>%    arrange(name, desc(n)) %>% mutate(rank=row_number()) %>%   filter(rank<=3) %>%   select(-rank) #> `summarise()` has grouped output by 'name'. You can override using the #> `.groups` argument. #> # A tibble: 29 × 3 #> # Groups:   name [10] #>    name     value                                                              n #>    <chr>    <chr>                                                          <int> #>  1 mnmdstrd Not Distracted                                                  1650 #>  2 mnmdstrd Inattention (Inattentive), Details Unknown                       124 #>  3 mnmdstrd Reported as Unknown if Distracted                                 73 #>  4 mpr_act  Crossing Roadway                                                3421 #>  5 mpr_act  Movement Along Roadway with Traffic (In or Adjacent to Travel…   565 #>  6 mpr_act  In Roadway - Other (Working, Playing, Etc.)                      229 #>  7 mtm_crsh None Noted                                                      2621 #>  8 mtm_crsh Failure to Yield Right-Of-Way                                   1145 #>  9 mtm_crsh Improper Crossing of Roadway or Intersection (Jaywalking)        383 #> 10 nmaction Crossing Roadway                                                6886 #> # ℹ 19 more rows head(myGESCRSS$events, 10) #>         casenum veh_no               aoi                        soe veventnum #> 1  201901174219      1 Non-Harmful Event     Ran Off Roadway - Left         1 #> 2  201901174219      1     3 Clock Point                       Curb         2 #> 3  201901174219      1     Non-Collision          Rollover/Overturn         3 #> 4  201901176655      1             Right Motor Vehicle In-Transport         1 #> 5  201901176655      2    12 Clock Point Motor Vehicle In-Transport         1 #> 6  201901176667      1    12 Clock Point Motor Vehicle In-Transport         1 #> 7  201901176667      2     4 Clock Point Motor Vehicle In-Transport         1 #> 8  201901176694      1 Non-Harmful Event              End Departure         1 #> 9  201901176694      1    12 Clock Point       Traffic Sign Support         2 #> 10 201901176694      1    12 Clock Point       Tree (Standing Only)         3 #>    year #> 1  2019 #> 2  2019 #> 3  2019 #> 4  2019 #> 5  2019 #> 6  2019 #> 7  2019 #> 8  2019 #> 9  2019 #> 10 2019 # View(myGESCRSS$codebook)  myGESCRSS$codebook %>%   filter(name_rfars == \"lgt_cond\") %>% distinct() %>% head(10) #>     source year     file name_ncsa name_rfars           label value #> 1  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     1 #> 2  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     2 #> 3  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     3 #> 4  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     4 #> 5  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     5 #> 6  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     6 #> 7  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     7 #> 8  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     8 #> 9  GESCRSS 2019 accident  LGT_COND   lgt_cond Light Condition     9 #> 10 GESCRSS 2020 accident  LGT_COND   lgt_cond Light Condition     1 #>                value_label #> 1                 Daylight #> 2       Dark - Not Lighted #> 3           Dark - Lighted #> 4                     Dawn #> 5                     Dusk #> 6  Dark - Unknown Lighting #> 7                    Other #> 8             Not Reported #> 9      Reported as Unknown #> 10                Daylight"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"counts-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Counts","title":"Download and Analyze Crash Data","text":"first step many transportation safety analyses involves counting number relevant crashes, fatalities, people involved. counts() lets users specify count, count (rural/urban /specified states regions), include, years aggregation interval (annually monthly), factors involved crash. returns simple tibble can easily piped ggplot() quickly visualize counts.","code":"my_counts <- counts(   myGESCRSS,   what = \"crashes\",   interval = c(\"year\")   )   head(my_counts) #> # A tibble: 3 × 8 #> # Groups:   year [3] #>    year date              n what    states region urb   who   #>   <dbl> <date>        <dbl> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2019 2019-01-01 6755841. crashes all    all    all   all   #> 2  2020 2020-01-01 5250837. crashes all    all    all   all   #> 3  2021 2021-01-01 6102936. crashes all    all    all   all  my_counts %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Total Estimated Crashes\") counts(   myGESCRSS,   where = list(region=\"s\"),   what = \"injuries\",   interval = c(\"year\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     labs(x=NULL, y=NULL, title = \"Injuries in the South\") compare_counts(   df = myGESCRSS,   what = \"injuries\",   where = list(region=\"s\"),   where2 = list(region=\"ne\")   ) %>%   ggplot(aes(x=date, y=n, label=scales::comma(n))) +      geom_col() +      geom_label(vjust=1.2) +     facet_wrap(.~region) +     labs(x=NULL, y=NULL, title = \"Injuries in the South and Northeast\", fill=NULL)"},{"path":"https://s87jackson.github.io/rfars/index.html","id":"mapping-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Mapping","title":"Download and Analyze Crash Data","text":"GES/CRSS friendly mapping. provide lat/lon coordinates States. Regions composed several States require extra steps generate mappable data.","code":""},{"path":"https://s87jackson.github.io/rfars/index.html","id":"modeling-1","dir":"","previous_headings":"Getting and Using GES/CRSS Data","what":"Modeling","title":"Download and Analyze Crash Data","text":"access full dataset also allows us develop statistical models. fit simple model injury severity function age restraint use. results indicate injury severity increases age, seat belts used properly.","code":"# table(myFARS$flat$inj_sev) # table(myFARS$flat$rest_use, useNA = \"ifany\") # table(myFARS$flat$per_typ, useNA = \"ifany\")  model_data <-   myGESCRSS$flat %>%   filter(rest_use %in% c(\"Lap Belt Only Used\",                          \"Shoulder Belt Only Used\",                          \"None Used / Not Applicable\",                          \"None Used/Not Applicable\",                          \"Shoulder and Lap Belt Used\"),          per_typ %in% c(\"Driver of a Motor Vehicle In-Transport\",                         \"Passenger of a Motor Vehicle In-Transport\")          ) %>%   mutate(     rest_use = case_when(       rest_use %in% c(\"Lap Belt Only Used\", \"Shoulder Belt Only Used\") ~ \"Partial\",       rest_use %in% c(\"None Used / Not Applicable\", \"None Used/Not Applicable\") ~ \"None\",       rest_use %in% c(\"Shoulder and Lap Belt Used\") ~ \"Full\",       TRUE ~ \"Unknown\"       ) %>%       as.factor() %>%       relevel(ref = \"Full\"),     kabco = case_when(       inj_sev == \"Fatal Injury (K)\" ~ 4,       inj_sev %in% c(\"Suspected Serious Injury (A)\",                       \"Suspected Serious Injury(A)\") ~ 3,       inj_sev %in% c(\"Suspected Minor Injury (B)\",                       \"Suspected Minor Injury(B)\") ~ 2,       inj_sev == \"Possible Injury (C)\" ~ 1,       inj_sev == \"No Apparent Injury (O)\" ~ 0,       TRUE ~ as.numeric(NA)       ),     age_n = gsub(\"\\\\D+\",\"\", age) %>% as.numeric(),     speed_n = gsub(\"\\\\D+\",\"\", trav_sp) %>% as.numeric()     )   my_model <- lm(kabco ~ age_n + rest_use + speed_n, data = model_data)   stargazer::stargazer(my_model, type = \"html\") new_data <- expand.grid(   age_n = c(20, 60),   speed_n = seq(10, 60, 10),   rest_use = factor(c(\"Full\", \"Partial\", \"None\"), levels = c(\"Full\", \"Partial\", \"None\"), ordered = TRUE) )  new_data %>%   mutate(pred = predict(my_model, newdata = new_data),          age = paste0(age_n, \" yrs\")) %>%   ggplot(aes(x=speed_n, y=pred, fill=age)) +     geom_col(position = position_dodge()) +     facet_wrap(.~rest_use) +     scale_y_continuous(       limits = c(0,4), breaks = 0:4, labels = c(\"O\", \"C\", \"B\", \"A\", \"K\"), expand = expansion()) +     theme(panel.grid = element_blank(),           panel.grid.major.y = element_line(c(\"black\")),           axis.ticks = element_blank()) +     labs(x=\"Travel Speed (mph)\", y=\"\", title = \"Predicted Injury Severity by Age, Restraint Use, and Travel Speed\",          fill=\"Age\",          caption = \"Full = correctly used seatbelt, partial = partially correctly used, none = no seatbelt.\")"},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving alcohol — alcohol","title":"(Internal) Find crashes involving alcohol — alcohol","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving alcohol — alcohol","text":"","code":"alcohol(df)"},{"path":"https://s87jackson.github.io/rfars/reference/alcohol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving alcohol — alcohol","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Append RDS files — appendRDS","title":"(Internal) Append RDS files — appendRDS","text":"(Internal) Append RDS files","code":""},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Append RDS files — appendRDS","text":"","code":"appendRDS(object, file, wd)"},{"path":"https://s87jackson.github.io/rfars/reference/appendRDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Append RDS files — appendRDS","text":"object object save append file name file saved saved wd directory check","code":""},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving bicyclists — bicyclist","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"","code":"bicyclist(df)"},{"path":"https://s87jackson.github.io/rfars/reference/bicyclist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving bicyclists — bicyclist","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare counts — compare_counts","title":"Compare counts — compare_counts","text":"Compare counts generated counts()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare counts — compare_counts","text":"","code":"compare_counts(   df,   interval = c(\"year\", \"month\")[1],   what = c(\"crashes\", \"fatalities\", \"injuries\", \"people\")[1],   where = list(states = \"all\", region = c(\"all\", \"ne\", \"mw\", \"s\", \"w\")[1], urb = c(\"all\",     \"rural\", \"urban\")[1]),   who = c(\"all\", \"drivers\", \"passengers\", \"bicyclists\", \"pedestrians\")[1],   involved = NULL,   what2 = what,   where2 = where,   who2 = who,   involved2 = involved )"},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare counts — compare_counts","text":"df input FARS object. interval interval count: months years. count: crashes, fatalities, people involved. count, list three elements: states (\"\" default), region (\"\"), urb (\"\") type person count: (default) drivers, passengers, pedestrians, bicyclists. involved Factors involved crash. Can : distracted driver, drowsy driver, police pursuit, motorcycle, pedalcyclist, bicyclist, pedestrian, pedbike, young driver, older driver, speeding, alcohol, drugs, hit run, roadway departure, rollover, large trucks. what2 Comparison point '' (set '' unless specified). where2 Comparison point '' (set '' unless specified). who2 Comparison point '' (set '' unless specified). involved2 Comparison point 'involved' (set 'involved' unless specified).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare counts — compare_counts","text":"tibble counts.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/compare_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare counts — compare_counts","text":"","code":"# \\donttest{ get_fars(years = 2020, states=\"Virginia\") %>%    compare_counts(      where = list(urb=\"rural\"),      where2 = list(urb=\"urban\")      ) #> # A tibble: 2 × 8 #> # Groups:   year [1] #>    year date           n what    states region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> #> 1  2020 2020-01-01   408 crashes all    all    rural all   #> 2  2020 2020-01-01   388 crashes all    all    urban all    get_fars(years = 2020, states=\"FL\") %>%    compare_counts(      involved = \"pedestrians\",      involved2 = \"bicyclists\"      ) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 2 × 9 #> # Groups:   year [1] #>    year date           n what    states region urb   who   involved    #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> <chr>       #> 1  2020 2020-01-01  3097 crashes all    all    all   all   pedestrians #> 2  2020 2020-01-01  3097 crashes all    all    all   all   bicyclists   # }"},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate counts — counts","title":"Generate counts — counts","text":"Use FARS GES/CRSS data generate commonly requested counts.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate counts — counts","text":"","code":"counts(   df,   what = c(\"crashes\", \"fatalities\", \"injuries\", \"people\")[1],   interval = c(\"year\", \"month\")[1],   where = list(states = \"all\", region = c(\"all\", \"ne\", \"mw\", \"s\", \"w\")[1], urb = c(\"all\",     \"rural\", \"urban\")[1]),   who = c(\"all\", \"drivers\", \"passengers\", \"bicyclists\", \"pedestrians\")[1],   involved = NULL,   filterOnly = FALSE )"},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate counts — counts","text":"df input data object (must class 'FARS' 'GESCRSS' produced get_fars() get_gescrss()). count: crashes (default), fatalities, injuries, people involved. interval interval count: months years (default). count. Must list elements: states (can '', full abbreviated state names, FIPS codes), region ('', 'ne', 'mw', 's', 'w'; short northeast, midwest, south, west), urb ('', 'rural', 'urban'). un-specified elements set '' default. type person count: '' (default) 'drivers', 'passengers', 'pedestrians', 'bicyclists'. involved Factors involved crash. Can : 'distracted driver', 'drowsy driver', 'police pursuit', 'motorcycle', 'pedalcyclist', 'bicyclist', 'pedestrian', 'pedbike', 'young driver', 'older driver', 'speeding', 'alcohol', 'drugs', 'hit run', 'roadway departure', 'rollover', 'large trucks'. NULL default. filterOnly Logical, whether filter data reduce counts (FALSE default).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate counts — counts","text":"Either filtered tibble (filterOnly=TRUE) tibble counts     (filterOnly=FALSE). filterOnly=TRUE, tibble returned     'flat' tibble input FARS object, filtered according     parameters. `df` GESCRSS object, counts returned sum appropriate weights.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate counts — counts","text":"","code":"# \\donttest{  get_fars(years = 2020) %>%    counts(where = list(states=\"Virginia\", urb=\"rural\")) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 1 × 8 #> # Groups:   year [1] #>    year date           n what    states   region urb   who   #>   <dbl> <date>     <int> <chr>   <chr>    <chr>  <chr> <chr> #> 1  2020 2020-01-01   408 crashes Virginia all    rural all    get_fars(years = 2020) %>%    counts(where=list(states=\"FL\"), involved = \"older driver\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists #> # A tibble: 1 × 9 #> # Groups:   year [1] #>    year date           n what    states region urb   who   involved     #>   <dbl> <date>     <int> <chr>   <chr>  <chr>  <chr> <chr> <chr>        #> 1  2020 2020-01-01   625 crashes FL     all    all   all   older driver  # }"},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving distracted drivers — distracted_driver","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"","code":"distracted_driver(df)"},{"path":"https://s87jackson.github.io/rfars/reference/distracted_driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving distracted drivers — distracted_driver","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Download FARS data files — download_fars","title":"(Internal) Download FARS data files — download_fars","text":"Download files NHTSA, unzip, prepare .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Download FARS data files — download_fars","text":"","code":"download_fars(years, dest_raw, dest_prepd, states)"},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Download FARS data files — download_fars","text":"years Years downloaded, yyyy (character numeric formats) dest_raw Directory store raw CSV files dest_prepd Directory store prepared CSV files states (Optional) Inherits get_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Download FARS data files — download_fars","text":"Nothing directly current environment. Various CSV files stored either temporary directory dir specified user.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Download FARS data files — download_fars","text":"Raw files downloaded NHTSA.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Download GES/CRSS data files — download_gescrss","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Download files NHTSA, unzip, prepare .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"","code":"download_gescrss(years, dest_raw, dest_prepd, regions)"},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"years Years downloaded, yyyy (character numeric formats) dest_raw Directory store raw CSV files dest_prepd Directory store prepared CSV files regions (Optional) Inherits get_gescrss()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Nothing directly current environment. Various CSV files stored either temporary directory dir specified user.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/download_gescrss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Download GES/CRSS data files — download_gescrss","text":"Raw files downloaded directly NHTSA.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drivers of a given age — driver_age","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"","code":"driver_age(df, age_min, age_max)"},{"path":"https://s87jackson.github.io/rfars/reference/driver_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drivers of a given age — driver_age","text":"df FARS GESCRSS data object searched. age_min Lower bound driver age (inclusive). age_max Upper bound driver age (inclusive).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"","code":"drowsy_driver(df)"},{"path":"https://s87jackson.github.io/rfars/reference/drowsy_driver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drowsy drivers — drowsy_driver","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving drugs — drugs","title":"(Internal) Find crashes involving drugs — drugs","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving drugs — drugs","text":"","code":"drugs(df)"},{"path":"https://s87jackson.github.io/rfars/reference/drugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving drugs — drugs","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"FARS Codebook — fars_codebook","title":"FARS Codebook — fars_codebook","text":"table describing FARS variable name, value, corresponding value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FARS Codebook — fars_codebook","text":"","code":"fars_codebook"},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FARS Codebook — fars_codebook","text":"data frame 132,454 rows 8 variables: source source data (either FARS GES/CRSS) year Year data element definition. file data file contains given variable. name_ncsa original name data element. name_rfars modified data element name used rfars label label data element (constituent values). value original value data element. value_label de-coded value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/fars_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FARS Codebook — fars_codebook","text":"codebook serves useful reference researchers using FARS data.    'source' variable intended help combine gescrss_codebook.    Data elements relatively stable occasionally discontinued, created anew,    modified. 'year' variable helps indicate availability data elements,    differentiates different definitions time. Users always    check discontinuities tabulating cases. 'file' variable indicates file given data element originally appeared. , files refers    SAS files downloaded NHTSA. data elements stayed original    file. moved multi_ files. example, 'weather'    originates 'accident' file, appears multi_acc data object    created rfars. 'name_ncsa' variable describes data element's name assigned    NCSA (organization within NHTSA manages database). maximize    compatibility years ease use programming, 'name_rfars'    provides cleaned naming convention (via janitor::clean_names()).    names provided help users find corresponding entry    Analytical User’s Manual    latter used data produced get_fars(). data element 'label', human-readable version    element names. example, label 'road_fnc' 'Roadway Function Class'.    definitions may provide enough information help users    conduct analysis. Consult Analytical User’s Manual    definitions details. data element multiple 'value'-'value_label' pairs: 'value' represents    original, non-human-readable value (usually number), 'value_label'    represents corresponding text value. example, 'road_fnc', 1 ('value')    corresponds 'Rural-Principal Arterial-Interstate' ('value_label'), 2 corresponds    'Rural-Principal Arterial-', etc.","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":null,"dir":"Reference","previous_headings":"","what":"Synonym table for various geographical scales — geo_relations","title":"Synonym table for various geographical scales — geo_relations","text":"dataset providing different ways refer states counties.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synonym table for various geographical scales — geo_relations","text":"","code":"geo_relations"},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synonym table for various geographical scales — geo_relations","text":"data frame 3,142 rows 6 variables: fips_state 2-digit FIPS code indicating state fips_county 3-digit FIPS code indicating county within state fips_tract 6-digit FIPS code indicating tract within county state_name_abbr 2-character, capitalized state abbreviation state_name_full fully spelled case-sensitive state name county_name_abbr abbreviated county name (usually minus word 'County') county_name_full fully spelled case-sensitive county name region fully spelled case-sensitive NHTSA region constituent states region_abbr abbreviated NHTSA region (ne, mw, s, w)","code":""},{"path":"https://s87jackson.github.io/rfars/reference/geo_relations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Synonym table for various geographical scales — geo_relations","text":"https://www.census.gov/geographies/reference-files/2015/demo/popest/2015-fips.html","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"GESCRSS Codebook — gescrss_codebook","title":"GESCRSS Codebook — gescrss_codebook","text":"table describing GESCRSS variable name, value, corresponding value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GESCRSS Codebook — gescrss_codebook","text":"","code":"gescrss_codebook"},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GESCRSS Codebook — gescrss_codebook","text":"data frame 85,907 rows 8 variables: source source data (either FARS GESCRSS) year Year data element definition. file data file contains given variable. name_ncsa original name data element. name_rfars modified data element name used rfars label label data element (constituent values). value original value data element. value_label de-coded value label.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/gescrss_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GESCRSS Codebook — gescrss_codebook","text":"codebook serves useful reference researchers using GES/CRSS data.    'source' variable intended help combine fars_codebook.    Data elements relatively stable occasionally discontinued, created anew,    modified. 'year' variable helps indicate availability data elements,    differentiates different definitions time. Users always    check discontinuities tabulating cases. 'file' variable indicates file given data element originally appeared. , files refers    SAS files downloaded NHTSA. data elements stayed original    file. moved multi_ files. example, 'weather'    originates 'accident' file, appears multi_acc data object    created rfars. 'name_ncsa' variable describes data element's name assigned    NCSA (organization within NHTSA manages database). maximize    compatibility years ease use programming, 'name_rfars'    provides cleaned naming convention (via janitor::clean_names()).    names provided help users find corresponding entry    CRSS User Manual    latter used data produced get_gescrss(). data element 'label', human-readable version    element names. example, label 'harm_ev' 'First Harmful Event'.    definitions may provide enough information help users    conduct analysis. Consult CRSS User Manual    definitions details. data element multiple 'value'-'value_label' pairs: 'value' represents    original, non-human-readable value (usually number), 'value_label'    represents corresponding text value. example, 'harm_ev', 1 ('value')    corresponds 'Rollover/Overturn' ('value_label'), 2 corresponds    'Fire/Explosion', etc.","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FARS data — get_fars","title":"Get FARS data — get_fars","text":"Bring FARS data current environment, whether downloading anew     using pre-existing files.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FARS data — get_fars","text":"","code":"get_fars(   years = 2011:2021,   states = NULL,   dir = NULL,   proceed = FALSE,   cache = NULL )"},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FARS data — get_fars","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2011-2021 (default). states States keep. Leave NULL (default) keep states. Can specified full state name (e.g. \"Virginia\"), abbreviation (\"VA\"), FIPS code (51). dir Directory search save 'FARS data' folder. NULL (default), files downloaded unzipped temporary directories prepared memory. proceed Logical, whether proceed downloading files without asking user permission (defaults FALSE, thus asking permission) cache name RDS file save use. specified file (e.g., 'myFARS.rds') exists 'dir' returned; , RDS file name saved 'dir' quick use subsequent calls.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get FARS data — get_fars","text":"FARS data object (list six tibbles: flat, multi_acc,     multi_veh, multi_per, events, codebook), described .","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get FARS data — get_fars","text":"function downloads raw data NHTSA.    directory (dir) specified, SAS files downloaded    tempdir(), also prepared, combined, brought    current environment. specify directory (dir), function    look 'FARS data' folder. found, created    populated raw prepared SAS RDS files. directory found,    function makes sure requested years present asks permission    download missing years. object returned list class 'FARS'. contains six tibbles:    flat, multi_acc, multi_veh, multi_per, events, codebook. Flat files wide-formatted presented person level.    crashes involve least one motor vehicle,    may contain one multiple people. three    entities crash data. flat files therefore repeat data elements    across multiple rows. Please conduct analysis entity mind. data elements can include multiple values data level    (e.g., multiple weather conditions corresponding crash, multiple    crash factors related vehicle person). elements    collected yyyy_multi_[acc/veh/per].rds files long format.    files contain crash, vehicle, person identifiers, two    variables labelled name value. correspond    variable names raw data files corresponding values,    respectively. events tibble provides sequence events vehicles involved    crash. See Crash Sequences vignette example. Finally, codebook tibble serves searchable codebook files given year. Please review FARS Analytical User's Manual","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_fars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get FARS data — get_fars","text":"","code":"# \\donttest{ myFARS <- get_fars(years = 2019:2021, states = \"51\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2020\\format-64' already exists myFARS <- get_fars(years = 2021, states = \"NC\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\FARS data\\raw\\2021\\format-64' already exists # }"},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GES/CRSS data — get_gescrss","title":"Get GES/CRSS data — get_gescrss","text":"Bring GES/CRSS data current environment, whether downloading anew     using pre-existing files.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GES/CRSS data — get_gescrss","text":"","code":"get_gescrss(   years = 2011:2021,   regions = c(\"mw\", \"ne\", \"s\", \"w\"),   dir = NULL,   proceed = FALSE,   cache = NULL )"},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GES/CRSS data — get_gescrss","text":"years Years downloaded, yyyy (character numeric formats), currently limited 2011-2021. regions (Optional) Regions keep: mw=midwest, ne=northeast, s=south, w=west. dir Directory search save 'GESCRSS data' folder. NULL (default), files downloaded unzipped temporary directories prepared memory. proceed Logical, whether proceed downloading files without asking user permission (defaults FALSE, thus asking permission) cache name RDS file save use. specified file (e.g., 'myFARS.rds') exists 'dir' returned; , RDS file name saved 'dir' quick use subsequent calls.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GES/CRSS data — get_gescrss","text":"GESCRSS data object (list six tibbles: flat, multi_acc,     multi_veh, multi_per, events, codebook).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GES/CRSS data — get_gescrss","text":"function downloads raw data GES CRSS crash databases.    directory (dir) specified, raw CSV files downloaded    tempdir(), also prepared, combined, brought    current environment. specify directory (dir), function    look 'GESCRSS data' folder. found, created    populated raw prepared SAS RDS files. directory found,    function makes sure requested years present asks permission    download missing years. object returned list class 'GESCRSS'. contains six tibbles:    flat, multi_acc, multi_veh, multi_per, events, codebook. Flat files wide-formatted presented person level.    crashes involve least one motor vehicle,    may contain one multiple people. three    entities crash data. flat files therefore repeat data elements    across multiple rows. Please conduct analysis entity mind. data elements can include multiple values data level    (e.g., multiple weather conditions corresponding crash, multiple    crash factors related vehicle person). elements    collected yyyy_multi_[acc/veh/per].rds files long format.    files contain crash, vehicle, person identifiers, two    variables labelled name value. correspond    variable names raw data files corresponding values,    respectively. events tibble provides sequence events vehicles involved    crash. See Crash Sequences vignette example. codebook tibble serves searchable codebook files given year. Please review CRSS Analytical User's Manual Regions follows:       mw = Midwest   = OH, , IL, MI, WI, MN, ND, SD, NE, IA, MO, KS       ne = Northeast = PA, NJ, NY, NH, VT, RI, MA, , CT       s  = South     = MD, DE, DC, WV, VA, KY, TN, NC, SC, GA, FL, AL, MS, LA, AR, OK, TX       w  = West      = MT, ID, WA, , CA, NV, NM, AZ, UT, CO, WY, AK, HI","code":""},{"path":"https://s87jackson.github.io/rfars/reference/get_gescrss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GES/CRSS data — get_gescrss","text":"","code":"# \\donttest{ myGESCRSS <- get_gescrss(years = 2019:2021, regions = \"s\") #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2020\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2020\\format-64' already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. myGESCRSS <- get_gescrss(years = 2021) #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-32' already exists #> Warning: 'C:\\Users\\s87ja\\AppData\\Local\\Temp\\RtmpSqglV3\\GESCRSS data\\raw\\2021\\format-64' already exists #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_character(), #>   year = col_double(), #>   psu = col_double(), #>   psustrat = col_double(), #>   casenum = col_double(), #>   weight = col_double(), #>   id = col_double(), #>   veh_no = col_double(), #>   per_no = col_double(), #>   minute = col_double(), #>   mod_year = col_logical(), #>   model = col_double(), #>   peds = col_double(), #>   permvit = col_double(), #>   pernotmvit = col_double(), #>   psu_var = col_double(), #>   pvh_invl = col_double(), #>   str_veh = col_double(), #>   ve_forms = col_double(), #>   ve_total = col_double() #> ) #> ℹ Use `spec()` for the full column specifications. # }"},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find hit and run crashes — hit_and_run","title":"(Internal) Find hit and run crashes — hit_and_run","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find hit and run crashes — hit_and_run","text":"","code":"hit_and_run(df)"},{"path":"https://s87jackson.github.io/rfars/reference/hit_and_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find hit and run crashes — hit_and_run","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Import the multi_ files — import_multi","title":"(Internal) Import the multi_ files — import_multi","text":"internal function imports multi_ files","code":""},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Import the multi_ files — import_multi","text":"","code":"import_multi(filename, where)"},{"path":"https://s87jackson.github.io/rfars/reference/import_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Import the multi_ files — import_multi","text":"filename filename (e.g. \"multi_acc.csv\") imported directory search within","code":""},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving large trucks — large_trucks","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"","code":"large_trucks(df)"},{"path":"https://s87jackson.github.io/rfars/reference/large_trucks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving large trucks — large_trucks","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Make id and year numeric — make_all_numeric","title":"(Internal) Make id and year numeric — make_all_numeric","text":"(Internal) Make id year numeric","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Make id and year numeric — make_all_numeric","text":"","code":"make_all_numeric(df)"},{"path":"https://s87jackson.github.io/rfars/reference/make_all_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Make id and year numeric — make_all_numeric","text":"df input dataframe","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Generate an ID variable — make_id","title":"(Internal) Generate an ID variable — make_id","text":"(Internal) Generate ID variable","code":""},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Generate an ID variable — make_id","text":"","code":"make_id(df)"},{"path":"https://s87jackson.github.io/rfars/reference/make_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Generate an ID variable — make_id","text":"df dataframe make id","code":""},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving motorcycles — motorcycle","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"","code":"motorcycle(df)"},{"path":"https://s87jackson.github.io/rfars/reference/motorcycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving motorcycles — motorcycle","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"","code":"pedalcyclist(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedalcyclist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedalcyclists — pedalcyclist","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"","code":"pedbike(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedbike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedstrians or bicyclists — pedbike","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving pedestrians — pedestrian","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"","code":"pedestrian(df)"},{"path":"https://s87jackson.github.io/rfars/reference/pedestrian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving pedestrians — pedestrian","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving police pursuits — police_pursuit","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"","code":"police_pursuit(df)"},{"path":"https://s87jackson.github.io/rfars/reference/police_pursuit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving police pursuits — police_pursuit","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare downloaded FARS files for use — prep_fars","title":"Prepare downloaded FARS files for use — prep_fars","text":"Prepare downloaded FARS files use","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare downloaded FARS files for use — prep_fars","text":"","code":"prep_fars(y, wd, rawfiles, prepared_dir, states)"},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare downloaded FARS files for use — prep_fars","text":"y year, passed prep_fars wd working directory, , passed prep_fars rawfiles dataframe translating filenames standard terms, passed prep_fars prepared_dir location prepared files saved, passed prep_fars states (Optional) Inherits get_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare downloaded FARS files for use — prep_fars","text":"Produces six files: yyyy_flat.rds, yyyy_multi_acc.rds,     yyyy_multi_veh.rds, yyyy_multi_per.rds, yyyy_events.rds, codebook.rds","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare downloaded GES/CRSS files for use — prep_gescrss","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"Prepare downloaded GES/CRSS files use","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"","code":"prep_gescrss(y, wd, rawfiles, prepared_dir, regions)"},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"y year, passed prep_gescrss wd working directory, , passed prep_gescrss rawfiles dataframe translating filenames standard terms, passed prep_gescrss prepared_dir location prepared files saved, passed prep_gescrss regions (Optional) Inherits get_gescrss()","code":""},{"path":"https://s87jackson.github.io/rfars/reference/prep_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare downloaded GES/CRSS files for use — prep_gescrss","text":"Produces six files: yyyy_flat.rds, yyyy_multi_acc.rds,     yyyy_multi_veh.rds, yyyy_multi_per.rds, yyyy_events.rds, codebook.rds","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Takes care of basic SAS file reading — read_basic_sas","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"(Internal) Takes care basic SAS file reading","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"","code":"read_basic_sas(x, wd, rawfiles, catfile = paste0(wd, \"formats.sas7bcat\"))"},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Takes care of basic SAS file reading — read_basic_sas","text":"x cleaned name data table (SAS7BDAT). wd working directory files rawfiles data frame connecting raw filenames cleaned ones. catfile location sas7bcat file","code":""},{"path":[]},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"(Internal) Takes care basic SAS file reading bcat file creates issue","code":""},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"","code":"read_basic_sas_nocat(x, wd, rawfiles)"},{"path":"https://s87jackson.github.io/rfars/reference/read_basic_sas_nocat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Takes care of basic SAS file reading when the bcat file creates an issue — read_basic_sas_nocat","text":"x cleaned name data table (SAS7BDAT). wd working directory files rawfiles data frame connecting raw filenames cleaned ones.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) rm_cols.f — rm_cols.f","title":"(Internal) rm_cols.f — rm_cols.f","text":"internal function removes variables unnecessarily duplicated across FARS tables.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) rm_cols.f — rm_cols.f","text":"","code":"rm_cols.f(df, a, b)"},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) rm_cols.f — rm_cols.f","text":"df input data frame. original, non-imputed variable. b imputed variable (often _im suffix).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) rm_cols.g — rm_cols.g","title":"(Internal) rm_cols.g — rm_cols.g","text":"internal function removes variables unnecessarily duplicated across GES/CRSS tables.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) rm_cols.g — rm_cols.g","text":"","code":"rm_cols.g(df, a, b)"},{"path":"https://s87jackson.github.io/rfars/reference/rm_cols.g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) rm_cols.g — rm_cols.g","text":"df input data frame. original, non-imputed variable. b imputed variable (often _im suffix).","code":""},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving road departures — road_depart","title":"(Internal) Find crashes involving road departures — road_depart","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving road departures — road_depart","text":"","code":"road_depart(df)"},{"path":"https://s87jackson.github.io/rfars/reference/road_depart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving road departures — road_depart","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving rollovers — rollover","title":"(Internal) Find crashes involving rollovers — rollover","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving rollovers — rollover","text":"","code":"rollover(df)"},{"path":"https://s87jackson.github.io/rfars/reference/rollover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving rollovers — rollover","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Find crashes involving speeding — speeding","title":"(Internal) Find crashes involving speeding — speeding","text":"internal functions take FARS object created use_fars look     various cases, distracted drowsy drivers.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Find crashes involving speeding — speeding","text":"","code":"speeding(df)"},{"path":"https://s87jackson.github.io/rfars/reference/speeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Find crashes involving speeding — speeding","text":"df FARS GESCRSS data object searched.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use FARS data files — use_fars","title":"(Internal) Use FARS data files — use_fars","text":"Compile multiple years prepared FARS data.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use FARS data files — use_fars","text":"","code":"use_fars(dir, prepared_dir, cache)"},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use FARS data files — use_fars","text":"dir Inherits get_fars(). prepared_dir Inherits get_fars(). cache Inherits get_fars().","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_fars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use FARS data files — use_fars","text":"Returns object class 'FARS' list six tibbles:     flat, multi_acc, multi_veh, multi_per, events, codebook.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use GESCRSS data files — use_gescrss","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"Compile multiple years prepared GESCRSS data.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"","code":"use_gescrss(dir, prepared_dir, cache)"},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"dir Inherits get_gescrss(). prepared_dir Inherits get_gescrss(). cache Inherits get_gescrss().","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_gescrss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use GESCRSS data files — use_gescrss","text":"Returns object class 'GESCRSS' list six tibbles:     flat, multi_acc, multi_veh, multi_per, events, codebook.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) use_imp — use_imp","title":"(Internal) use_imp — use_imp","text":"internal function uses imputed variables (present many GES/CRSS tables)","code":""},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) use_imp — use_imp","text":"","code":"use_imp(df, original, imputed, show = FALSE)"},{"path":"https://s87jackson.github.io/rfars/reference/use_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) use_imp — use_imp","text":"df input data frame. original original, non-imputed variable. imputed imputed variable (often _im suffix). show Logical (FALSE default) Show differences original imputed values.","code":""},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Validate user-provided list of states — validate_states","title":"(Internal) Validate user-provided list of states — validate_states","text":"(Internal) Validate user-provided list states","code":""},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Validate user-provided list of states — validate_states","text":"","code":"validate_states(states)"},{"path":"https://s87jackson.github.io/rfars/reference/validate_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Validate user-provided list of states — validate_states","text":"states States specified get_fars, prep_fars, counts","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-030","dir":"Changelog","previous_headings":"","what":"rfars 0.3.0","title":"rfars 0.3.0","text":"CRAN release: 2023-05-05 Expanded FARS coverage 2011-2021 Added get_gescrss() get GES/CRSS data Modified get_ functions produce codebook.csv file Included codebook.rds file quick reference geo_relations table now includes NHTSA regions Improved counts() function Added compare_counts() function SAS files pulled NHTSA, rather CSVs Consolidated prep_fars_yyyy functions prep_fars()","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-020","dir":"Changelog","previous_headings":"","what":"rfars 0.2.0","title":"rfars 0.2.0","text":"CRAN release: 2022-11-01 Added ability download FARS data tempdir. Improved documentation. Streamlined workflow contained get_fars(). Developed hex sticker.","code":""},{"path":"https://s87jackson.github.io/rfars/news/index.html","id":"rfars-010","dir":"Changelog","previous_headings":"","what":"rfars 0.1.0","title":"rfars 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
>>>>>>> f28255eba3938d188f9cd21df04d7540837b86b0
